{"ast":null,"code":"/**\n * Payment service for handling subscriptions and payments\n */\n\nclass PaymentService {\n  constructor() {\n    this.config = void 0;\n    this.initialized = false;\n    // Browser-safe environment variable access with fallbacks\n    this.config = {\n      stripePublishableKey: this.getEnvVar('REACT_APP_STRIPE_PUBLISHABLE_KEY') || 'pk_test_demo_stripe_key',\n      coinbaseApiKey: this.getEnvVar('REACT_APP_COINBASE_API_KEY'),\n      paypalClientId: this.getEnvVar('REACT_APP_PAYPAL_CLIENT_ID'),\n      creatorWalletAddress: this.getEnvVar('REACT_APP_CREATOR_WALLET') || '0x742d35Cc6634C0532925a3b8D6Cd9b3F4c1a7f8D',\n      // Your actual wallet\n      webhookSecret: this.getEnvVar('REACT_APP_WEBHOOK_SECRET') || 'whsec_test_demo_secret'\n    };\n  }\n\n  /**\n   * Safe environment variable access for browser\n   */\n  getEnvVar(key) {\n    try {\n      // Check if we're in browser environment\n      if (typeof window !== 'undefined') {\n        var _ENV__;\n        // For browser environment, try to access from window object or fallback\n        return ((_ENV__ = window.__ENV__) === null || _ENV__ === void 0 ? void 0 : _ENV__[key]) || undefined;\n      }\n      // For server-side rendering (shouldn't happen in this case)\n      return undefined;\n    } catch (error) {\n      console.warn(`Failed to access environment variable ${key}:`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Initialize payment providers\n   */\n  async initialize() {\n    if (this.initialized) return;\n    try {\n      // Initialize Stripe\n      if (this.config.stripePublishableKey && window.Stripe) {\n        const stripe = window.Stripe(this.config.stripePublishableKey);\n        window.stripeInstance = stripe;\n      }\n\n      // Initialize other payment providers as needed\n      // PayPal, Coinbase Commerce, etc.\n\n      this.initialized = true;\n    } catch (error) {\n      console.error('Failed to initialize payment service:', error);\n    }\n  }\n\n  /**\n   * Create payment intent for subscription\n   */\n  async createPaymentIntent(amount, currency, planId, userId) {\n    try {\n      // In production, this would call your backend API\n      const response = await fetch('/api/payment/create-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount,\n          currency,\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create payment intent');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n\n      // Fallback for demo - simulate payment intent\n      return {\n        id: `pi_demo_${Date.now()}`,\n        amount: amount * 100,\n        // Convert to cents\n        currency: currency.toLowerCase(),\n        status: 'requires_payment_method',\n        metadata: {\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        }\n      };\n    }\n  }\n\n  /**\n   * Process payment with Stripe\n   */\n  async processStripePayment(paymentIntentId, paymentMethod) {\n    try {\n      const stripe = window.stripeInstance;\n      if (!stripe) throw new Error('Stripe not initialized');\n      const {\n        error\n      } = await stripe.confirmCardPayment(paymentIntentId, {\n        payment_method: {\n          card: paymentMethod,\n          billing_details: {\n            // Add billing details\n          }\n        }\n      });\n      if (error) {\n        console.error('Stripe payment error:', error);\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error processing Stripe payment:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process crypto payment\n   */\n  async processCryptoPayment(amount, currency, userWallet) {\n    try {\n      // For ETH payments\n      if (currency === 'ETH' && window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const transactionParameters = {\n          to: this.config.creatorWalletAddress,\n          from: accounts[0],\n          value: (amount * Math.pow(10, 18)).toString(16),\n          // Convert ETH to wei\n          gasPrice: '0x5208',\n          // 21000 gwei\n          gas: '0x5208' // 21000 gas limit\n        };\n        const txHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters]\n        });\n        return txHash;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error processing crypto payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verify payment webhook\n   */\n  async verifyWebhook(payload, signature) {\n    try {\n      // Verify webhook signature\n      // This would use Stripe's webhook verification in production\n      return true;\n    } catch (error) {\n      console.error('Error verifying webhook:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Handle successful payment\n   */\n  async handleSuccessfulPayment(paymentIntentId, userId, planId) {\n    try {\n      // Create or update subscription\n      const subscription = {\n        id: `sub_${Date.now()}`,\n        userId,\n        planId,\n        status: 'active',\n        currentPeriodStart: Date.now(),\n        currentPeriodEnd: Date.now() + 30 * 24 * 60 * 60 * 1000,\n        // 30 days\n        cancelAtPeriodEnd: false,\n        createdAt: Date.now(),\n        updatedAt: Date.now()\n      };\n\n      // Store subscription\n      localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(subscription));\n\n      // Send confirmation email (in production)\n      // await this.sendConfirmationEmail(userId, subscription);\n\n      // Update creator earnings tracking\n      await this.trackCreatorEarnings(paymentIntentId, planId);\n      return subscription;\n    } catch (error) {\n      console.error('Error handling successful payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Track creator earnings\n   */\n  async trackCreatorEarnings(paymentIntentId, planId) {\n    try {\n      const earnings = {\n        id: paymentIntentId,\n        planId,\n        amount: planId === 'pro' ? 29 : 99,\n        currency: 'USD',\n        timestamp: Date.now(),\n        walletAddress: this.config.creatorWalletAddress\n      };\n\n      // Store earnings record\n      const existingEarnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      existingEarnings.push(earnings);\n      localStorage.setItem('cryptosniper_creator_earnings', JSON.stringify(existingEarnings));\n    } catch (error) {\n      console.error('Error tracking creator earnings:', error);\n    }\n  }\n\n  /**\n   * Get creator earnings summary\n   */\n  async getCreatorEarnings() {\n    try {\n      const earnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      const now = Date.now();\n      const monthAgo = now - 30 * 24 * 60 * 60 * 1000;\n      const total = earnings.reduce((sum, earning) => sum + earning.amount, 0);\n      const monthly = earnings.filter(earning => earning.timestamp > monthAgo).reduce((sum, earning) => sum + earning.amount, 0);\n\n      // Count active subscribers\n      const subscribers = Object.keys(localStorage).filter(key => key.startsWith('cryptosniper_subscription_')).filter(key => {\n        const sub = JSON.parse(localStorage.getItem(key) || '{}');\n        return sub.status === 'active' && sub.currentPeriodEnd > now;\n      }).length;\n      return {\n        total,\n        monthly,\n        subscribers\n      };\n    } catch (error) {\n      console.error('Error getting creator earnings:', error);\n      return {\n        total: 0,\n        monthly: 0,\n        subscribers: 0\n      };\n    }\n  }\n}\nexport const paymentService = new PaymentService();\nexport default paymentService;","map":{"version":3,"names":["PaymentService","constructor","config","initialized","stripePublishableKey","getEnvVar","coinbaseApiKey","paypalClientId","creatorWalletAddress","webhookSecret","key","window","_ENV__","__ENV__","undefined","error","console","warn","initialize","Stripe","stripe","stripeInstance","createPaymentIntent","amount","currency","planId","userId","response","fetch","method","headers","body","JSON","stringify","creatorWallet","ok","Error","json","id","Date","now","toLowerCase","status","metadata","processStripePayment","paymentIntentId","paymentMethod","confirmCardPayment","payment_method","card","billing_details","processCryptoPayment","userWallet","ethereum","accounts","request","transactionParameters","to","from","value","Math","pow","toString","gasPrice","gas","txHash","params","verifyWebhook","payload","signature","handleSuccessfulPayment","subscription","currentPeriodStart","currentPeriodEnd","cancelAtPeriodEnd","createdAt","updatedAt","localStorage","setItem","trackCreatorEarnings","earnings","timestamp","walletAddress","existingEarnings","parse","getItem","push","getCreatorEarnings","monthAgo","total","reduce","sum","earning","monthly","filter","subscribers","Object","keys","startsWith","sub","length","paymentService"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/services/paymentService.ts"],"sourcesContent":["/**\n * Payment service for handling subscriptions and payments\n */\n\nimport { PaymentIntent, PaymentMethod, Subscription } from '../types/subscription';\n\nexport interface PaymentConfig {\n  stripePublishableKey: string;\n  coinbaseApiKey?: string;\n  paypalClientId?: string;\n  creatorWalletAddress: string; // Your wallet address for receiving payments\n  webhookSecret: string;\n}\n\nclass PaymentService {\n  private config: PaymentConfig;\n  private initialized = false;\n\n  constructor() {\n    // Browser-safe environment variable access with fallbacks\n    this.config = {\n      stripePublishableKey: this.getEnvVar('REACT_APP_STRIPE_PUBLISHABLE_KEY') || 'pk_test_demo_stripe_key',\n      coinbaseApiKey: this.getEnvVar('REACT_APP_COINBASE_API_KEY'),\n      paypalClientId: this.getEnvVar('REACT_APP_PAYPAL_CLIENT_ID'),\n      creatorWalletAddress: this.getEnvVar('REACT_APP_CREATOR_WALLET') || '0x742d35Cc6634C0532925a3b8D6Cd9b3F4c1a7f8D', // Your actual wallet\n      webhookSecret: this.getEnvVar('REACT_APP_WEBHOOK_SECRET') || 'whsec_test_demo_secret'\n    };\n  }\n\n  /**\n   * Safe environment variable access for browser\n   */\n  private getEnvVar(key: string): string | undefined {\n    try {\n      // Check if we're in browser environment\n      if (typeof window !== 'undefined') {\n        // For browser environment, try to access from window object or fallback\n        return (window as any).__ENV__?.[key] || undefined;\n      }\n      // For server-side rendering (shouldn't happen in this case)\n      return undefined;\n    } catch (error) {\n      console.warn(`Failed to access environment variable ${key}:`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Initialize payment providers\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Initialize Stripe\n      if (this.config.stripePublishableKey && window.Stripe) {\n        const stripe = window.Stripe(this.config.stripePublishableKey);\n        (window as any).stripeInstance = stripe;\n      }\n\n      // Initialize other payment providers as needed\n      // PayPal, Coinbase Commerce, etc.\n\n      this.initialized = true;\n    } catch (error) {\n      console.error('Failed to initialize payment service:', error);\n    }\n  }\n\n  /**\n   * Create payment intent for subscription\n   */\n  async createPaymentIntent(\n    amount: number,\n    currency: string,\n    planId: string,\n    userId: string\n  ): Promise<PaymentIntent | null> {\n    try {\n      // In production, this would call your backend API\n      const response = await fetch('/api/payment/create-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount,\n          currency,\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create payment intent');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n      \n      // Fallback for demo - simulate payment intent\n      return {\n        id: `pi_demo_${Date.now()}`,\n        amount: amount * 100, // Convert to cents\n        currency: currency.toLowerCase(),\n        status: 'requires_payment_method',\n        metadata: {\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        }\n      };\n    }\n  }\n\n  /**\n   * Process payment with Stripe\n   */\n  async processStripePayment(\n    paymentIntentId: string,\n    paymentMethod: PaymentMethod\n  ): Promise<boolean> {\n    try {\n      const stripe = (window as any).stripeInstance;\n      if (!stripe) throw new Error('Stripe not initialized');\n\n      const { error } = await stripe.confirmCardPayment(paymentIntentId, {\n        payment_method: {\n          card: paymentMethod,\n          billing_details: {\n            // Add billing details\n          },\n        },\n      });\n\n      if (error) {\n        console.error('Stripe payment error:', error);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error processing Stripe payment:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process crypto payment\n   */\n  async processCryptoPayment(\n    amount: number,\n    currency: 'ETH' | 'BTC',\n    userWallet: string\n  ): Promise<string | null> {\n    try {\n      // For ETH payments\n      if (currency === 'ETH' && window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        const transactionParameters = {\n          to: this.config.creatorWalletAddress,\n          from: accounts[0],\n          value: (amount * Math.pow(10, 18)).toString(16), // Convert ETH to wei\n          gasPrice: '0x5208', // 21000 gwei\n          gas: '0x5208', // 21000 gas limit\n        };\n\n        const txHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters],\n        });\n\n        return txHash;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error processing crypto payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verify payment webhook\n   */\n  async verifyWebhook(payload: string, signature: string): Promise<boolean> {\n    try {\n      // Verify webhook signature\n      // This would use Stripe's webhook verification in production\n      return true;\n    } catch (error) {\n      console.error('Error verifying webhook:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Handle successful payment\n   */\n  async handleSuccessfulPayment(\n    paymentIntentId: string,\n    userId: string,\n    planId: string\n  ): Promise<Subscription | null> {\n    try {\n      // Create or update subscription\n      const subscription: Subscription = {\n        id: `sub_${Date.now()}`,\n        userId,\n        planId,\n        status: 'active',\n        currentPeriodStart: Date.now(),\n        currentPeriodEnd: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 days\n        cancelAtPeriodEnd: false,\n        createdAt: Date.now(),\n        updatedAt: Date.now()\n      };\n\n      // Store subscription\n      localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(subscription));\n\n      // Send confirmation email (in production)\n      // await this.sendConfirmationEmail(userId, subscription);\n\n      // Update creator earnings tracking\n      await this.trackCreatorEarnings(paymentIntentId, planId);\n\n      return subscription;\n    } catch (error) {\n      console.error('Error handling successful payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Track creator earnings\n   */\n  private async trackCreatorEarnings(paymentIntentId: string, planId: string): Promise<void> {\n    try {\n      const earnings = {\n        id: paymentIntentId,\n        planId,\n        amount: planId === 'pro' ? 29 : 99,\n        currency: 'USD',\n        timestamp: Date.now(),\n        walletAddress: this.config.creatorWalletAddress\n      };\n\n      // Store earnings record\n      const existingEarnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      existingEarnings.push(earnings);\n      localStorage.setItem('cryptosniper_creator_earnings', JSON.stringify(existingEarnings));\n\n    } catch (error) {\n      console.error('Error tracking creator earnings:', error);\n    }\n  }\n\n  /**\n   * Get creator earnings summary\n   */\n  async getCreatorEarnings(): Promise<{\n    total: number;\n    monthly: number;\n    subscribers: number;\n  }> {\n    try {\n      const earnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      const now = Date.now();\n      const monthAgo = now - (30 * 24 * 60 * 60 * 1000);\n\n      const total = earnings.reduce((sum: number, earning: any) => sum + earning.amount, 0);\n      const monthly = earnings\n        .filter((earning: any) => earning.timestamp > monthAgo)\n        .reduce((sum: number, earning: any) => sum + earning.amount, 0);\n      \n      // Count active subscribers\n      const subscribers = Object.keys(localStorage)\n        .filter(key => key.startsWith('cryptosniper_subscription_'))\n        .filter(key => {\n          const sub = JSON.parse(localStorage.getItem(key) || '{}');\n          return sub.status === 'active' && sub.currentPeriodEnd > now;\n        }).length;\n\n      return { total, monthly, subscribers };\n    } catch (error) {\n      console.error('Error getting creator earnings:', error);\n      return { total: 0, monthly: 0, subscribers: 0 };\n    }\n  }\n}\n\nexport const paymentService = new PaymentService();\nexport default paymentService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}