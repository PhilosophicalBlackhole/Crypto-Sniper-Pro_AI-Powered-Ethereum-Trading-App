{"ast":null,"code":"/**\n * authService - Unified authentication layer.\n * - Uses Supabase Auth when window.__ENV__ provides REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY.\n * - Falls back to safe device-local demo auth (localStorage) when not configured.\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\n/** Public user shape for the app */\n\n/** Keys expected on window.__ENV__ for browser usage */\n\n/** Read value from window.__ENV__ safely */\nfunction getEnvVar(key) {\n  try {\n    if (typeof window !== 'undefined') {\n      var _ENV__;\n      return ((_ENV__ = window.__ENV__) === null || _ENV__ === void 0 ? void 0 : _ENV__[key]) || undefined;\n    }\n  } catch {\n    // ignore\n  }\n  return undefined;\n}\n\n/** Memoized Supabase client when configured */\nlet supabase = null;\n\n/**\n * Ensure a Supabase client is available when env is present.\n */\nfunction ensureSupabase() {\n  const url = getEnvVar('REACT_APP_SUPABASE_URL');\n  const anon = getEnvVar('REACT_APP_SUPABASE_ANON_KEY');\n  if (!url || !anon) return null;\n  if (!supabase) {\n    supabase = createClient(url, anon, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n      }\n    });\n  }\n  return supabase;\n}\n\n/** Demo local storage helpers (fallback) */\n\nfunction localKey(email) {\n  return `cryptosniper_creds_${email.trim().toLowerCase()}`;\n}\n\n/** Very basic demo hash (not for production) */\nfunction hashPassword(password) {\n  let hash = 0;\n  for (let i = 0; i < password.length; i++) {\n    const c = password.charCodeAt(i);\n    hash = (hash << 5) - hash + c;\n    hash |= 0;\n  }\n  return hash.toString(36);\n}\nconst authService = {\n  /**\n   * Return true if managed auth (Supabase) is configured.\n   */\n  isManaged() {\n    return !!ensureSupabase();\n  },\n  /**\n   * Get current user if logged in (managed).\n   * For demo fallback, reads cryptosniper_user from localStorage.\n   */\n  async getCurrentUser() {\n    const sb = ensureSupabase();\n    if (sb) {\n      var _u$user_metadata, _u$email;\n      const {\n        data\n      } = await sb.auth.getUser();\n      const u = data === null || data === void 0 ? void 0 : data.user;\n      if (!u) return null;\n      const name = ((_u$user_metadata = u.user_metadata) === null || _u$user_metadata === void 0 ? void 0 : _u$user_metadata.name) || ((_u$email = u.email) === null || _u$email === void 0 ? void 0 : _u$email.split('@')[0]) || 'User';\n      return {\n        id: u.id,\n        name,\n        email: u.email || '',\n        plan: 'free',\n        avatar: null\n      };\n    }\n    try {\n      const raw = localStorage.getItem('cryptosniper_user');\n      return raw ? JSON.parse(raw) : null;\n    } catch {\n      return null;\n    }\n  },\n  /**\n   * Subscribe to auth changes (Supabase only). Returns unsubscribe.\n   */\n  onAuthStateChange(callback) {\n    const sb = ensureSupabase();\n    if (!sb) {\n      // No-op for demo mode\n      return () => {};\n    }\n    const {\n      data: listener\n    } = sb.auth.onAuthStateChange(async (_event, session) => {\n      if (session !== null && session !== void 0 && session.user) {\n        var _u$user_metadata2, _u$email2;\n        const u = session.user;\n        const name = ((_u$user_metadata2 = u.user_metadata) === null || _u$user_metadata2 === void 0 ? void 0 : _u$user_metadata2.name) || ((_u$email2 = u.email) === null || _u$email2 === void 0 ? void 0 : _u$email2.split('@')[0]) || 'User';\n        callback({\n          id: u.id,\n          name,\n          email: u.email || '',\n          plan: 'free',\n          avatar: null\n        });\n      } else {\n        callback(null);\n      }\n    });\n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  },\n  /**\n   * Sign up with email/password.\n   * - For Supabase, returns user or null (when email confirmation required).\n   * - For demo fallback, stores credentials on this device.\n   */\n  async signUp(name, email, password, plan) {\n    const sb = ensureSupabase();\n    if (sb) {\n      const {\n        data,\n        error\n      } = await sb.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            name,\n            plan\n          }\n        }\n      });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) {\n        return {\n          user: null,\n          message: 'Check your inbox to confirm your email.'\n        };\n      }\n      return {\n        user: {\n          id: u.id,\n          name,\n          email: u.email || email,\n          plan,\n          avatar: null\n        },\n        message: 'Account created.'\n      };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    if (localStorage.getItem(key)) {\n      throw new Error('Account with this email already exists on this device');\n    }\n    const credentials = {\n      email: email.trim(),\n      hashedPassword: hashPassword(password),\n      name: name.trim(),\n      plan,\n      createdAt: Date.now()\n    };\n    localStorage.setItem(key, JSON.stringify(credentials));\n    const user = {\n      id: btoa(email.trim().toLowerCase()),\n      name: name.trim(),\n      email: email.trim(),\n      plan,\n      avatar: null\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return {\n      user\n    };\n  },\n  /**\n   * Sign in with email/password.\n   */\n  async signIn(email, password) {\n    const sb = ensureSupabase();\n    if (sb) {\n      var _u$user_metadata3, _u$email3;\n      const {\n        data,\n        error\n      } = await sb.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) throw new Error('Login failed');\n      const name = ((_u$user_metadata3 = u.user_metadata) === null || _u$user_metadata3 === void 0 ? void 0 : _u$user_metadata3.name) || ((_u$email3 = u.email) === null || _u$email3 === void 0 ? void 0 : _u$email3.split('@')[0]) || 'User';\n      return {\n        id: u.id,\n        name,\n        email: u.email || email,\n        plan: 'free',\n        avatar: null\n      };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    const raw = localStorage.getItem(key);\n    if (!raw) throw new Error('Account not found on this device. Please sign up first.');\n    const creds = JSON.parse(raw);\n    if (hashPassword(password) !== creds.hashedPassword) throw new Error('Invalid email or password');\n    const user = {\n      id: btoa(email.trim().toLowerCase()),\n      name: creds.name,\n      email: creds.email,\n      plan: creds.plan,\n      avatar: null\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return user;\n  },\n  /**\n   * Send a password reset email (Supabase managed).\n   * Falls back to message in demo mode.\n   */\n  async resetPassword(email) {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return {\n        ok: true,\n        message: 'Demo mode: use the local reset to update password on this device.'\n      };\n    }\n    const redirectTo = typeof window !== 'undefined' ? `${window.location.origin}${window.location.pathname}` : undefined;\n    const {\n      error\n    } = await sb.auth.resetPasswordForEmail(email, {\n      redirectTo\n    });\n    if (error) throw error;\n    return {\n      ok: true,\n      message: 'If an account exists, a reset link has been sent to your email.'\n    };\n  },\n  /**\n   * Send a magic link/OTP sign-in (Supabase managed).\n   */\n  async sendMagicLink(email) {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return {\n        ok: false,\n        message: 'Magic link is only available with managed auth.'\n      };\n    }\n    const redirectTo = typeof window !== 'undefined' ? `${window.location.origin}${window.location.pathname}` : undefined;\n    const {\n      error\n    } = await sb.auth.signInWithOtp({\n      email,\n      options: {\n        emailRedirectTo: redirectTo\n      }\n    });\n    if (error) throw error;\n    return {\n      ok: true,\n      message: 'Magic link sent. Check your inbox.'\n    };\n  },\n  /**\n   * Update password for the currently authenticated managed user.\n   */\n  async updatePassword(newPassword) {\n    const sb = ensureSupabase();\n    if (!sb) return {\n      ok: false,\n      message: 'Not available in demo mode.'\n    };\n    const {\n      error\n    } = await sb.auth.updateUser({\n      password: newPassword\n    });\n    if (error) throw error;\n    return {\n      ok: true,\n      message: 'Password updated.'\n    };\n  },\n  /**\n   * Sign out the current user.\n   */\n  async signOut() {\n    const sb = ensureSupabase();\n    if (sb) {\n      await sb.auth.signOut();\n      return;\n    }\n    localStorage.removeItem('cryptosniper_user');\n  }\n};\nexport default authService;","map":{"version":3,"names":["createClient","getEnvVar","key","window","_ENV__","__ENV__","undefined","supabase","ensureSupabase","url","anon","auth","autoRefreshToken","persistSession","detectSessionInUrl","localKey","email","trim","toLowerCase","hashPassword","password","hash","i","length","c","charCodeAt","toString","authService","isManaged","getCurrentUser","sb","_u$user_metadata","_u$email","data","getUser","u","user","name","user_metadata","split","id","plan","avatar","raw","localStorage","getItem","JSON","parse","onAuthStateChange","callback","listener","_event","session","_u$user_metadata2","_u$email2","subscription","unsubscribe","signUp","error","options","message","Error","credentials","hashedPassword","createdAt","Date","now","setItem","stringify","btoa","signIn","_u$user_metadata3","_u$email3","signInWithPassword","creds","resetPassword","ok","redirectTo","location","origin","pathname","resetPasswordForEmail","sendMagicLink","signInWithOtp","emailRedirectTo","updatePassword","newPassword","updateUser","signOut","removeItem"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/services/authService.ts"],"sourcesContent":["/**\n * authService - Unified authentication layer.\n * - Uses Supabase Auth when window.__ENV__ provides REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY.\n * - Falls back to safe device-local demo auth (localStorage) when not configured.\n */\n\nimport { createClient, type SupabaseClient } from '@supabase/supabase-js';\n\n/** Public user shape for the app */\nexport interface AuthUser {\n  id: string;\n  name: string;\n  email: string;\n  plan: 'free' | 'pro' | 'premium';\n  avatar?: string | null;\n}\n\n/** Keys expected on window.__ENV__ for browser usage */\ntype EnvKeys = 'REACT_APP_SUPABASE_URL' | 'REACT_APP_SUPABASE_ANON_KEY';\n\n/** Read value from window.__ENV__ safely */\nfunction getEnvVar(key: EnvKeys): string | undefined {\n  try {\n    if (typeof window !== 'undefined') {\n      return (window as any).__ENV__?.[key] || undefined;\n    }\n  } catch {\n    // ignore\n  }\n  return undefined;\n}\n\n/** Memoized Supabase client when configured */\nlet supabase: SupabaseClient | null = null;\n\n/**\n * Ensure a Supabase client is available when env is present.\n */\nfunction ensureSupabase(): SupabaseClient | null {\n  const url = getEnvVar('REACT_APP_SUPABASE_URL');\n  const anon = getEnvVar('REACT_APP_SUPABASE_ANON_KEY');\n  if (!url || !anon) return null;\n  if (!supabase) {\n    supabase = createClient(url, anon, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n      },\n    });\n  }\n  return supabase;\n}\n\n/** Demo local storage helpers (fallback) */\ninterface StoredCredentials {\n  email: string;\n  hashedPassword: string;\n  name: string;\n  plan: 'free' | 'pro' | 'premium';\n  avatar?: string;\n  createdAt: number;\n}\n\nfunction localKey(email: string): string {\n  return `cryptosniper_creds_${email.trim().toLowerCase()}`;\n}\n\n/** Very basic demo hash (not for production) */\nfunction hashPassword(password: string): string {\n  let hash = 0;\n  for (let i = 0; i < password.length; i++) {\n    const c = password.charCodeAt(i);\n    hash = (hash << 5) - hash + c;\n    hash |= 0;\n  }\n  return hash.toString(36);\n}\n\nconst authService = {\n  /**\n   * Return true if managed auth (Supabase) is configured.\n   */\n  isManaged(): boolean {\n    return !!ensureSupabase();\n  },\n\n  /**\n   * Get current user if logged in (managed).\n   * For demo fallback, reads cryptosniper_user from localStorage.\n   */\n  async getCurrentUser(): Promise<AuthUser | null> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data } = await sb.auth.getUser();\n      const u = data?.user;\n      if (!u) return null;\n      const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n      return {\n        id: u.id,\n        name,\n        email: u.email || '',\n        plan: 'free',\n        avatar: null,\n      };\n    }\n    try {\n      const raw = localStorage.getItem('cryptosniper_user');\n      return raw ? (JSON.parse(raw) as AuthUser) : null;\n    } catch {\n      return null;\n    }\n  },\n\n  /**\n   * Subscribe to auth changes (Supabase only). Returns unsubscribe.\n   */\n  onAuthStateChange(callback: (user: AuthUser | null) => void): () => void {\n    const sb = ensureSupabase();\n    if (!sb) {\n      // No-op for demo mode\n      return () => {};\n    }\n    const { data: listener } = sb.auth.onAuthStateChange(async (_event, session) => {\n      if (session?.user) {\n        const u = session.user;\n        const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n        callback({\n          id: u.id,\n          name,\n          email: u.email || '',\n          plan: 'free',\n          avatar: null,\n        });\n      } else {\n        callback(null);\n      }\n    });\n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  },\n\n  /**\n   * Sign up with email/password.\n   * - For Supabase, returns user or null (when email confirmation required).\n   * - For demo fallback, stores credentials on this device.\n   */\n  async signUp(\n    name: string,\n    email: string,\n    password: string,\n    plan: 'free' | 'pro' | 'premium'\n  ): Promise<{ user: AuthUser | null; message?: string }> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data, error } = await sb.auth.signUp({\n        email,\n        password,\n        options: { data: { name, plan } },\n      });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) {\n        return { user: null, message: 'Check your inbox to confirm your email.' };\n      }\n      return {\n        user: {\n          id: u.id,\n          name,\n          email: u.email || email,\n          plan,\n          avatar: null,\n        },\n        message: 'Account created.',\n      };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    if (localStorage.getItem(key)) {\n      throw new Error('Account with this email already exists on this device');\n    }\n    const credentials: StoredCredentials = {\n      email: email.trim(),\n      hashedPassword: hashPassword(password),\n      name: name.trim(),\n      plan,\n      createdAt: Date.now(),\n    };\n    localStorage.setItem(key, JSON.stringify(credentials));\n    const user: AuthUser = {\n      id: btoa(email.trim().toLowerCase()),\n      name: name.trim(),\n      email: email.trim(),\n      plan,\n      avatar: null,\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return { user };\n  },\n\n  /**\n   * Sign in with email/password.\n   */\n  async signIn(email: string, password: string): Promise<AuthUser> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data, error } = await sb.auth.signInWithPassword({ email, password });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) throw new Error('Login failed');\n      const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n      return { id: u.id, name, email: u.email || email, plan: 'free', avatar: null };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    const raw = localStorage.getItem(key);\n    if (!raw) throw new Error('Account not found on this device. Please sign up first.');\n    const creds = JSON.parse(raw) as StoredCredentials;\n    if (hashPassword(password) !== creds.hashedPassword) throw new Error('Invalid email or password');\n    const user: AuthUser = {\n      id: btoa(email.trim().toLowerCase()),\n      name: creds.name,\n      email: creds.email,\n      plan: creds.plan,\n      avatar: null,\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return user;\n  },\n\n  /**\n   * Send a password reset email (Supabase managed).\n   * Falls back to message in demo mode.\n   */\n  async resetPassword(email: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return { ok: true, message: 'Demo mode: use the local reset to update password on this device.' };\n    }\n    const redirectTo =\n      typeof window !== 'undefined'\n        ? `${window.location.origin}${window.location.pathname}`\n        : undefined;\n    const { error } = await sb.auth.resetPasswordForEmail(email, { redirectTo });\n    if (error) throw error;\n    return { ok: true, message: 'If an account exists, a reset link has been sent to your email.' };\n  },\n\n  /**\n   * Send a magic link/OTP sign-in (Supabase managed).\n   */\n  async sendMagicLink(email: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return { ok: false, message: 'Magic link is only available with managed auth.' };\n    }\n    const redirectTo =\n      typeof window !== 'undefined'\n        ? `${window.location.origin}${window.location.pathname}`\n        : undefined;\n    const { error } = await sb.auth.signInWithOtp({ email, options: { emailRedirectTo: redirectTo } });\n    if (error) throw error;\n    return { ok: true, message: 'Magic link sent. Check your inbox.' };\n  },\n\n  /**\n   * Update password for the currently authenticated managed user.\n   */\n  async updatePassword(newPassword: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) return { ok: false, message: 'Not available in demo mode.' };\n    const { error } = await sb.auth.updateUser({ password: newPassword });\n    if (error) throw error;\n    return { ok: true, message: 'Password updated.' };\n  },\n\n  /**\n   * Sign out the current user.\n   */\n  async signOut(): Promise<void> {\n    const sb = ensureSupabase();\n    if (sb) {\n      await sb.auth.signOut();\n      return;\n    }\n    localStorage.removeItem('cryptosniper_user');\n  },\n};\n\nexport default authService;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAA6B,uBAAuB;;AAEzE;;AASA;;AAGA;AACA,SAASC,SAASA,CAACC,GAAY,EAAsB;EACnD,IAAI;IACF,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAAA,IAAAC,MAAA;MACjC,OAAO,EAAAA,MAAA,GAACD,MAAM,CAASE,OAAO,cAAAD,MAAA,uBAAvBA,MAAA,CAA0BF,GAAG,CAAC,KAAII,SAAS;IACpD;EACF,CAAC,CAAC,MAAM;IACN;EAAA;EAEF,OAAOA,SAAS;AAClB;;AAEA;AACA,IAAIC,QAA+B,GAAG,IAAI;;AAE1C;AACA;AACA;AACA,SAASC,cAAcA,CAAA,EAA0B;EAC/C,MAAMC,GAAG,GAAGR,SAAS,CAAC,wBAAwB,CAAC;EAC/C,MAAMS,IAAI,GAAGT,SAAS,CAAC,6BAA6B,CAAC;EACrD,IAAI,CAACQ,GAAG,IAAI,CAACC,IAAI,EAAE,OAAO,IAAI;EAC9B,IAAI,CAACH,QAAQ,EAAE;IACbA,QAAQ,GAAGP,YAAY,CAACS,GAAG,EAAEC,IAAI,EAAE;MACjCC,IAAI,EAAE;QACJC,gBAAgB,EAAE,IAAI;QACtBC,cAAc,EAAE,IAAI;QACpBC,kBAAkB,EAAE;MACtB;IACF,CAAC,CAAC;EACJ;EACA,OAAOP,QAAQ;AACjB;;AAEA;;AAUA,SAASQ,QAAQA,CAACC,KAAa,EAAU;EACvC,OAAO,sBAAsBA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE;AAC3D;;AAEA;AACA,SAASC,YAAYA,CAACC,QAAgB,EAAU;EAC9C,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,MAAME,CAAC,GAAGJ,QAAQ,CAACK,UAAU,CAACH,CAAC,CAAC;IAChCD,IAAI,GAAG,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGG,CAAC;IAC7BH,IAAI,IAAI,CAAC;EACX;EACA,OAAOA,IAAI,CAACK,QAAQ,CAAC,EAAE,CAAC;AAC1B;AAEA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;EACEC,SAASA,CAAA,EAAY;IACnB,OAAO,CAAC,CAACpB,cAAc,CAAC,CAAC;EAC3B,CAAC;EAED;AACF;AACA;AACA;EACE,MAAMqB,cAAcA,CAAA,EAA6B;IAC/C,MAAMC,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAIsB,EAAE,EAAE;MAAA,IAAAC,gBAAA,EAAAC,QAAA;MACN,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMH,EAAE,CAACnB,IAAI,CAACuB,OAAO,CAAC,CAAC;MACxC,MAAMC,CAAC,GAAGF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,IAAI;MACpB,IAAI,CAACD,CAAC,EAAE,OAAO,IAAI;MACnB,MAAME,IAAI,GAAG,EAAAN,gBAAA,GAAEI,CAAC,CAACG,aAAa,cAAAP,gBAAA,uBAAhBA,gBAAA,CAA0BM,IAAI,OAAAL,QAAA,GAAeG,CAAC,CAACnB,KAAK,cAAAgB,QAAA,uBAAPA,QAAA,CAASO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAI,MAAM;MAC3F,OAAO;QACLC,EAAE,EAAEL,CAAC,CAACK,EAAE;QACRH,IAAI;QACJrB,KAAK,EAAEmB,CAAC,CAACnB,KAAK,IAAI,EAAE;QACpByB,IAAI,EAAE,MAAM;QACZC,MAAM,EAAE;MACV,CAAC;IACH;IACA,IAAI;MACF,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC;MACrD,OAAOF,GAAG,GAAIG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAgB,IAAI;IACnD,CAAC,CAAC,MAAM;MACN,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;EACEK,iBAAiBA,CAACC,QAAyC,EAAc;IACvE,MAAMnB,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAI,CAACsB,EAAE,EAAE;MACP;MACA,OAAO,MAAM,CAAC,CAAC;IACjB;IACA,MAAM;MAAEG,IAAI,EAAEiB;IAAS,CAAC,GAAGpB,EAAE,CAACnB,IAAI,CAACqC,iBAAiB,CAAC,OAAOG,MAAM,EAAEC,OAAO,KAAK;MAC9E,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEhB,IAAI,EAAE;QAAA,IAAAiB,iBAAA,EAAAC,SAAA;QACjB,MAAMnB,CAAC,GAAGiB,OAAO,CAAChB,IAAI;QACtB,MAAMC,IAAI,GAAG,EAAAgB,iBAAA,GAAElB,CAAC,CAACG,aAAa,cAAAe,iBAAA,uBAAhBA,iBAAA,CAA0BhB,IAAI,OAAAiB,SAAA,GAAenB,CAAC,CAACnB,KAAK,cAAAsC,SAAA,uBAAPA,SAAA,CAASf,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAI,MAAM;QAC3FU,QAAQ,CAAC;UACPT,EAAE,EAAEL,CAAC,CAACK,EAAE;UACRH,IAAI;UACJrB,KAAK,EAAEmB,CAAC,CAACnB,KAAK,IAAI,EAAE;UACpByB,IAAI,EAAE,MAAM;UACZC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC,MAAM;QACLO,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC;IACF,OAAO,MAAM;MACXC,QAAQ,CAACK,YAAY,CAACC,WAAW,CAAC,CAAC;IACrC,CAAC;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;EACE,MAAMC,MAAMA,CACVpB,IAAY,EACZrB,KAAa,EACbI,QAAgB,EAChBqB,IAAgC,EACsB;IACtD,MAAMX,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAIsB,EAAE,EAAE;MACN,MAAM;QAAEG,IAAI;QAAEyB;MAAM,CAAC,GAAG,MAAM5B,EAAE,CAACnB,IAAI,CAAC8C,MAAM,CAAC;QAC3CzC,KAAK;QACLI,QAAQ;QACRuC,OAAO,EAAE;UAAE1B,IAAI,EAAE;YAAEI,IAAI;YAAEI;UAAK;QAAE;MAClC,CAAC,CAAC;MACF,IAAIiB,KAAK,EAAE,MAAMA,KAAK;MACtB,MAAMvB,CAAC,GAAGF,IAAI,CAACG,IAAI;MACnB,IAAI,CAACD,CAAC,EAAE;QACN,OAAO;UAAEC,IAAI,EAAE,IAAI;UAAEwB,OAAO,EAAE;QAA0C,CAAC;MAC3E;MACA,OAAO;QACLxB,IAAI,EAAE;UACJI,EAAE,EAAEL,CAAC,CAACK,EAAE;UACRH,IAAI;UACJrB,KAAK,EAAEmB,CAAC,CAACnB,KAAK,IAAIA,KAAK;UACvByB,IAAI;UACJC,MAAM,EAAE;QACV,CAAC;QACDkB,OAAO,EAAE;MACX,CAAC;IACH;IACA;IACA,MAAM1D,GAAG,GAAGa,QAAQ,CAACC,KAAK,CAAC;IAC3B,IAAI4B,YAAY,CAACC,OAAO,CAAC3C,GAAG,CAAC,EAAE;MAC7B,MAAM,IAAI2D,KAAK,CAAC,uDAAuD,CAAC;IAC1E;IACA,MAAMC,WAA8B,GAAG;MACrC9C,KAAK,EAAEA,KAAK,CAACC,IAAI,CAAC,CAAC;MACnB8C,cAAc,EAAE5C,YAAY,CAACC,QAAQ,CAAC;MACtCiB,IAAI,EAAEA,IAAI,CAACpB,IAAI,CAAC,CAAC;MACjBwB,IAAI;MACJuB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;IACDtB,YAAY,CAACuB,OAAO,CAACjE,GAAG,EAAE4C,IAAI,CAACsB,SAAS,CAACN,WAAW,CAAC,CAAC;IACtD,MAAM1B,IAAc,GAAG;MACrBI,EAAE,EAAE6B,IAAI,CAACrD,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MACpCmB,IAAI,EAAEA,IAAI,CAACpB,IAAI,CAAC,CAAC;MACjBD,KAAK,EAAEA,KAAK,CAACC,IAAI,CAAC,CAAC;MACnBwB,IAAI;MACJC,MAAM,EAAE;IACV,CAAC;IACDE,YAAY,CAACuB,OAAO,CAAC,mBAAmB,EAAErB,IAAI,CAACsB,SAAS,CAAChC,IAAI,CAAC,CAAC;IAC/D,OAAO;MAAEA;IAAK,CAAC;EACjB,CAAC;EAED;AACF;AACA;EACE,MAAMkC,MAAMA,CAACtD,KAAa,EAAEI,QAAgB,EAAqB;IAC/D,MAAMU,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAIsB,EAAE,EAAE;MAAA,IAAAyC,iBAAA,EAAAC,SAAA;MACN,MAAM;QAAEvC,IAAI;QAAEyB;MAAM,CAAC,GAAG,MAAM5B,EAAE,CAACnB,IAAI,CAAC8D,kBAAkB,CAAC;QAAEzD,KAAK;QAAEI;MAAS,CAAC,CAAC;MAC7E,IAAIsC,KAAK,EAAE,MAAMA,KAAK;MACtB,MAAMvB,CAAC,GAAGF,IAAI,CAACG,IAAI;MACnB,IAAI,CAACD,CAAC,EAAE,MAAM,IAAI0B,KAAK,CAAC,cAAc,CAAC;MACvC,MAAMxB,IAAI,GAAG,EAAAkC,iBAAA,GAAEpC,CAAC,CAACG,aAAa,cAAAiC,iBAAA,uBAAhBA,iBAAA,CAA0BlC,IAAI,OAAAmC,SAAA,GAAerC,CAAC,CAACnB,KAAK,cAAAwD,SAAA,uBAAPA,SAAA,CAASjC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAI,MAAM;MAC3F,OAAO;QAAEC,EAAE,EAAEL,CAAC,CAACK,EAAE;QAAEH,IAAI;QAAErB,KAAK,EAAEmB,CAAC,CAACnB,KAAK,IAAIA,KAAK;QAAEyB,IAAI,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAK,CAAC;IAChF;IACA;IACA,MAAMxC,GAAG,GAAGa,QAAQ,CAACC,KAAK,CAAC;IAC3B,MAAM2B,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC3C,GAAG,CAAC;IACrC,IAAI,CAACyC,GAAG,EAAE,MAAM,IAAIkB,KAAK,CAAC,yDAAyD,CAAC;IACpF,MAAMa,KAAK,GAAG5B,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAsB;IAClD,IAAIxB,YAAY,CAACC,QAAQ,CAAC,KAAKsD,KAAK,CAACX,cAAc,EAAE,MAAM,IAAIF,KAAK,CAAC,2BAA2B,CAAC;IACjG,MAAMzB,IAAc,GAAG;MACrBI,EAAE,EAAE6B,IAAI,CAACrD,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MACpCmB,IAAI,EAAEqC,KAAK,CAACrC,IAAI;MAChBrB,KAAK,EAAE0D,KAAK,CAAC1D,KAAK;MAClByB,IAAI,EAAEiC,KAAK,CAACjC,IAAI;MAChBC,MAAM,EAAE;IACV,CAAC;IACDE,YAAY,CAACuB,OAAO,CAAC,mBAAmB,EAAErB,IAAI,CAACsB,SAAS,CAAChC,IAAI,CAAC,CAAC;IAC/D,OAAOA,IAAI;EACb,CAAC;EAED;AACF;AACA;AACA;EACE,MAAMuC,aAAaA,CAAC3D,KAAa,EAA6C;IAC5E,MAAMc,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAI,CAACsB,EAAE,EAAE;MACP,OAAO;QAAE8C,EAAE,EAAE,IAAI;QAAEhB,OAAO,EAAE;MAAoE,CAAC;IACnG;IACA,MAAMiB,UAAU,GACd,OAAO1E,MAAM,KAAK,WAAW,GACzB,GAAGA,MAAM,CAAC2E,QAAQ,CAACC,MAAM,GAAG5E,MAAM,CAAC2E,QAAQ,CAACE,QAAQ,EAAE,GACtD1E,SAAS;IACf,MAAM;MAAEoD;IAAM,CAAC,GAAG,MAAM5B,EAAE,CAACnB,IAAI,CAACsE,qBAAqB,CAACjE,KAAK,EAAE;MAAE6D;IAAW,CAAC,CAAC;IAC5E,IAAInB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAEkB,EAAE,EAAE,IAAI;MAAEhB,OAAO,EAAE;IAAkE,CAAC;EACjG,CAAC;EAED;AACF;AACA;EACE,MAAMsB,aAAaA,CAAClE,KAAa,EAA6C;IAC5E,MAAMc,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAI,CAACsB,EAAE,EAAE;MACP,OAAO;QAAE8C,EAAE,EAAE,KAAK;QAAEhB,OAAO,EAAE;MAAkD,CAAC;IAClF;IACA,MAAMiB,UAAU,GACd,OAAO1E,MAAM,KAAK,WAAW,GACzB,GAAGA,MAAM,CAAC2E,QAAQ,CAACC,MAAM,GAAG5E,MAAM,CAAC2E,QAAQ,CAACE,QAAQ,EAAE,GACtD1E,SAAS;IACf,MAAM;MAAEoD;IAAM,CAAC,GAAG,MAAM5B,EAAE,CAACnB,IAAI,CAACwE,aAAa,CAAC;MAAEnE,KAAK;MAAE2C,OAAO,EAAE;QAAEyB,eAAe,EAAEP;MAAW;IAAE,CAAC,CAAC;IAClG,IAAInB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAEkB,EAAE,EAAE,IAAI;MAAEhB,OAAO,EAAE;IAAqC,CAAC;EACpE,CAAC;EAED;AACF;AACA;EACE,MAAMyB,cAAcA,CAACC,WAAmB,EAA6C;IACnF,MAAMxD,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAI,CAACsB,EAAE,EAAE,OAAO;MAAE8C,EAAE,EAAE,KAAK;MAAEhB,OAAO,EAAE;IAA8B,CAAC;IACrE,MAAM;MAAEF;IAAM,CAAC,GAAG,MAAM5B,EAAE,CAACnB,IAAI,CAAC4E,UAAU,CAAC;MAAEnE,QAAQ,EAAEkE;IAAY,CAAC,CAAC;IACrE,IAAI5B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAO;MAAEkB,EAAE,EAAE,IAAI;MAAEhB,OAAO,EAAE;IAAoB,CAAC;EACnD,CAAC;EAED;AACF;AACA;EACE,MAAM4B,OAAOA,CAAA,EAAkB;IAC7B,MAAM1D,EAAE,GAAGtB,cAAc,CAAC,CAAC;IAC3B,IAAIsB,EAAE,EAAE;MACN,MAAMA,EAAE,CAACnB,IAAI,CAAC6E,OAAO,CAAC,CAAC;MACvB;IACF;IACA5C,YAAY,CAAC6C,UAAU,CAAC,mBAAmB,CAAC;EAC9C;AACF,CAAC;AAED,eAAe9D,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}