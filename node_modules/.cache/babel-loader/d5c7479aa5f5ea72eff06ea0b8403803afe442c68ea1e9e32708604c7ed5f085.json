{"ast":null,"code":"/**\n * authService - Unified authentication layer.\n * - Uses Supabase Auth when window.__ENV__ provides REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY.\n * - Falls back to safe device-local demo auth (localStorage) when not configured.\n */import{createClient}from'@supabase/supabase-js';/** Public user shape for the app *//** Keys expected on window.__ENV__ for browser usage *//** Read value from window.__ENV__ safely */function getEnvVar(key){try{if(typeof window!=='undefined'){var _ENV__;return((_ENV__=window.__ENV__)===null||_ENV__===void 0?void 0:_ENV__[key])||undefined;}}catch{// ignore\n}return undefined;}/** Memoized Supabase client when configured */let supabase=null;/**\n * Ensure a Supabase client is available when env is present.\n */function ensureSupabase(){const url=getEnvVar('REACT_APP_SUPABASE_URL');const anon=getEnvVar('REACT_APP_SUPABASE_ANON_KEY');if(!url||!anon)return null;if(!supabase){supabase=createClient(url,anon,{auth:{autoRefreshToken:true,persistSession:true,detectSessionInUrl:true}});}return supabase;}/** Demo local storage helpers (fallback) */function localKey(email){return`cryptosniper_creds_${email.trim().toLowerCase()}`;}/** Very basic demo hash (not for production) */function hashPassword(password){let hash=0;for(let i=0;i<password.length;i++){const c=password.charCodeAt(i);hash=(hash<<5)-hash+c;hash|=0;}return hash.toString(36);}const authService={/**\n   * Return true if managed auth (Supabase) is configured.\n   */isManaged(){return!!ensureSupabase();},/**\n   * Get current user if logged in (managed).\n   * For demo fallback, reads cryptosniper_user from localStorage.\n   */async getCurrentUser(){const sb=ensureSupabase();if(sb){var _u$user_metadata,_u$email;const{data}=await sb.auth.getUser();const u=data===null||data===void 0?void 0:data.user;if(!u)return null;const name=((_u$user_metadata=u.user_metadata)===null||_u$user_metadata===void 0?void 0:_u$user_metadata.name)||((_u$email=u.email)===null||_u$email===void 0?void 0:_u$email.split('@')[0])||'User';return{id:u.id,name,email:u.email||'',plan:'free',avatar:null};}try{const raw=localStorage.getItem('cryptosniper_user');return raw?JSON.parse(raw):null;}catch{return null;}},/**\n   * Subscribe to auth changes (Supabase only). Returns unsubscribe.\n   */onAuthStateChange(callback){const sb=ensureSupabase();if(!sb){// No-op for demo mode\nreturn()=>{};}const{data:listener}=sb.auth.onAuthStateChange(async(_event,session)=>{if(session!==null&&session!==void 0&&session.user){var _u$user_metadata2,_u$email2;const u=session.user;const name=((_u$user_metadata2=u.user_metadata)===null||_u$user_metadata2===void 0?void 0:_u$user_metadata2.name)||((_u$email2=u.email)===null||_u$email2===void 0?void 0:_u$email2.split('@')[0])||'User';callback({id:u.id,name,email:u.email||'',plan:'free',avatar:null});}else{callback(null);}});return()=>{listener.subscription.unsubscribe();};},/**\n   * Sign up with email/password.\n   * - For Supabase, returns user or null (when email confirmation required).\n   * - For demo fallback, stores credentials on this device.\n   */async signUp(name,email,password,plan){const sb=ensureSupabase();if(sb){const{data,error}=await sb.auth.signUp({email,password,options:{data:{name,plan}}});if(error)throw error;const u=data.user;if(!u){return{user:null,message:'Check your inbox to confirm your email.'};}return{user:{id:u.id,name,email:u.email||email,plan,avatar:null},message:'Account created.'};}// Demo fallback\nconst key=localKey(email);if(localStorage.getItem(key)){throw new Error('Account with this email already exists on this device');}const credentials={email:email.trim(),hashedPassword:hashPassword(password),name:name.trim(),plan,createdAt:Date.now()};localStorage.setItem(key,JSON.stringify(credentials));const user={id:btoa(email.trim().toLowerCase()),name:name.trim(),email:email.trim(),plan,avatar:null};localStorage.setItem('cryptosniper_user',JSON.stringify(user));return{user};},/**\n   * Sign in with email/password.\n   */async signIn(email,password){const sb=ensureSupabase();if(sb){var _u$user_metadata3,_u$email3;const{data,error}=await sb.auth.signInWithPassword({email,password});if(error)throw error;const u=data.user;if(!u)throw new Error('Login failed');const name=((_u$user_metadata3=u.user_metadata)===null||_u$user_metadata3===void 0?void 0:_u$user_metadata3.name)||((_u$email3=u.email)===null||_u$email3===void 0?void 0:_u$email3.split('@')[0])||'User';return{id:u.id,name,email:u.email||email,plan:'free',avatar:null};}// Demo fallback\nconst key=localKey(email);const raw=localStorage.getItem(key);if(!raw)throw new Error('Account not found on this device. Please sign up first.');const creds=JSON.parse(raw);if(hashPassword(password)!==creds.hashedPassword)throw new Error('Invalid email or password');const user={id:btoa(email.trim().toLowerCase()),name:creds.name,email:creds.email,plan:creds.plan,avatar:null};localStorage.setItem('cryptosniper_user',JSON.stringify(user));return user;},/**\n   * Send a password reset email (Supabase managed).\n   * Falls back to message in demo mode.\n   */async resetPassword(email){const sb=ensureSupabase();if(!sb){return{ok:true,message:'Demo mode: use the local reset to update password on this device.'};}const redirectTo=typeof window!=='undefined'?`${window.location.origin}${window.location.pathname}`:undefined;const{error}=await sb.auth.resetPasswordForEmail(email,{redirectTo});if(error)throw error;return{ok:true,message:'If an account exists, a reset link has been sent to your email.'};},/**\n   * Send a magic link/OTP sign-in (Supabase managed).\n   */async sendMagicLink(email){const sb=ensureSupabase();if(!sb){return{ok:false,message:'Magic link is only available with managed auth.'};}const redirectTo=typeof window!=='undefined'?`${window.location.origin}${window.location.pathname}`:undefined;const{error}=await sb.auth.signInWithOtp({email,options:{emailRedirectTo:redirectTo}});if(error)throw error;return{ok:true,message:'Magic link sent. Check your inbox.'};},/**\n   * Update password for the currently authenticated managed user.\n   */async updatePassword(newPassword){const sb=ensureSupabase();if(!sb)return{ok:false,message:'Not available in demo mode.'};const{error}=await sb.auth.updateUser({password:newPassword});if(error)throw error;return{ok:true,message:'Password updated.'};},/**\n   * Sign out the current user.\n   */async signOut(){const sb=ensureSupabase();if(sb){await sb.auth.signOut();return;}localStorage.removeItem('cryptosniper_user');}};export default authService;","map":{"version":3,"names":["createClient","getEnvVar","key","window","_ENV__","__ENV__","undefined","supabase","ensureSupabase","url","anon","auth","autoRefreshToken","persistSession","detectSessionInUrl","localKey","email","trim","toLowerCase","hashPassword","password","hash","i","length","c","charCodeAt","toString","authService","isManaged","getCurrentUser","sb","_u$user_metadata","_u$email","data","getUser","u","user","name","user_metadata","split","id","plan","avatar","raw","localStorage","getItem","JSON","parse","onAuthStateChange","callback","listener","_event","session","_u$user_metadata2","_u$email2","subscription","unsubscribe","signUp","error","options","message","Error","credentials","hashedPassword","createdAt","Date","now","setItem","stringify","btoa","signIn","_u$user_metadata3","_u$email3","signInWithPassword","creds","resetPassword","ok","redirectTo","location","origin","pathname","resetPasswordForEmail","sendMagicLink","signInWithOtp","emailRedirectTo","updatePassword","newPassword","updateUser","signOut","removeItem"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/services/authService.ts"],"sourcesContent":["/**\n * authService - Unified authentication layer.\n * - Uses Supabase Auth when window.__ENV__ provides REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY.\n * - Falls back to safe device-local demo auth (localStorage) when not configured.\n */\n\nimport { createClient, type SupabaseClient } from '@supabase/supabase-js';\n\n/** Public user shape for the app */\nexport interface AuthUser {\n  id: string;\n  name: string;\n  email: string;\n  plan: 'free' | 'pro' | 'premium';\n  avatar?: string | null;\n}\n\n/** Keys expected on window.__ENV__ for browser usage */\ntype EnvKeys = 'REACT_APP_SUPABASE_URL' | 'REACT_APP_SUPABASE_ANON_KEY';\n\n/** Read value from window.__ENV__ safely */\nfunction getEnvVar(key: EnvKeys): string | undefined {\n  try {\n    if (typeof window !== 'undefined') {\n      return (window as any).__ENV__?.[key] || undefined;\n    }\n  } catch {\n    // ignore\n  }\n  return undefined;\n}\n\n/** Memoized Supabase client when configured */\nlet supabase: SupabaseClient | null = null;\n\n/**\n * Ensure a Supabase client is available when env is present.\n */\nfunction ensureSupabase(): SupabaseClient | null {\n  const url = getEnvVar('REACT_APP_SUPABASE_URL');\n  const anon = getEnvVar('REACT_APP_SUPABASE_ANON_KEY');\n  if (!url || !anon) return null;\n  if (!supabase) {\n    supabase = createClient(url, anon, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n      },\n    });\n  }\n  return supabase;\n}\n\n/** Demo local storage helpers (fallback) */\ninterface StoredCredentials {\n  email: string;\n  hashedPassword: string;\n  name: string;\n  plan: 'free' | 'pro' | 'premium';\n  avatar?: string;\n  createdAt: number;\n}\n\nfunction localKey(email: string): string {\n  return `cryptosniper_creds_${email.trim().toLowerCase()}`;\n}\n\n/** Very basic demo hash (not for production) */\nfunction hashPassword(password: string): string {\n  let hash = 0;\n  for (let i = 0; i < password.length; i++) {\n    const c = password.charCodeAt(i);\n    hash = (hash << 5) - hash + c;\n    hash |= 0;\n  }\n  return hash.toString(36);\n}\n\nconst authService = {\n  /**\n   * Return true if managed auth (Supabase) is configured.\n   */\n  isManaged(): boolean {\n    return !!ensureSupabase();\n  },\n\n  /**\n   * Get current user if logged in (managed).\n   * For demo fallback, reads cryptosniper_user from localStorage.\n   */\n  async getCurrentUser(): Promise<AuthUser | null> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data } = await sb.auth.getUser();\n      const u = data?.user;\n      if (!u) return null;\n      const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n      return {\n        id: u.id,\n        name,\n        email: u.email || '',\n        plan: 'free',\n        avatar: null,\n      };\n    }\n    try {\n      const raw = localStorage.getItem('cryptosniper_user');\n      return raw ? (JSON.parse(raw) as AuthUser) : null;\n    } catch {\n      return null;\n    }\n  },\n\n  /**\n   * Subscribe to auth changes (Supabase only). Returns unsubscribe.\n   */\n  onAuthStateChange(callback: (user: AuthUser | null) => void): () => void {\n    const sb = ensureSupabase();\n    if (!sb) {\n      // No-op for demo mode\n      return () => {};\n    }\n    const { data: listener } = sb.auth.onAuthStateChange(async (_event, session) => {\n      if (session?.user) {\n        const u = session.user;\n        const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n        callback({\n          id: u.id,\n          name,\n          email: u.email || '',\n          plan: 'free',\n          avatar: null,\n        });\n      } else {\n        callback(null);\n      }\n    });\n    return () => {\n      listener.subscription.unsubscribe();\n    };\n  },\n\n  /**\n   * Sign up with email/password.\n   * - For Supabase, returns user or null (when email confirmation required).\n   * - For demo fallback, stores credentials on this device.\n   */\n  async signUp(\n    name: string,\n    email: string,\n    password: string,\n    plan: 'free' | 'pro' | 'premium'\n  ): Promise<{ user: AuthUser | null; message?: string }> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data, error } = await sb.auth.signUp({\n        email,\n        password,\n        options: { data: { name, plan } },\n      });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) {\n        return { user: null, message: 'Check your inbox to confirm your email.' };\n      }\n      return {\n        user: {\n          id: u.id,\n          name,\n          email: u.email || email,\n          plan,\n          avatar: null,\n        },\n        message: 'Account created.',\n      };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    if (localStorage.getItem(key)) {\n      throw new Error('Account with this email already exists on this device');\n    }\n    const credentials: StoredCredentials = {\n      email: email.trim(),\n      hashedPassword: hashPassword(password),\n      name: name.trim(),\n      plan,\n      createdAt: Date.now(),\n    };\n    localStorage.setItem(key, JSON.stringify(credentials));\n    const user: AuthUser = {\n      id: btoa(email.trim().toLowerCase()),\n      name: name.trim(),\n      email: email.trim(),\n      plan,\n      avatar: null,\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return { user };\n  },\n\n  /**\n   * Sign in with email/password.\n   */\n  async signIn(email: string, password: string): Promise<AuthUser> {\n    const sb = ensureSupabase();\n    if (sb) {\n      const { data, error } = await sb.auth.signInWithPassword({ email, password });\n      if (error) throw error;\n      const u = data.user;\n      if (!u) throw new Error('Login failed');\n      const name = ((u.user_metadata as any)?.name as string) || u.email?.split('@')[0] || 'User';\n      return { id: u.id, name, email: u.email || email, plan: 'free', avatar: null };\n    }\n    // Demo fallback\n    const key = localKey(email);\n    const raw = localStorage.getItem(key);\n    if (!raw) throw new Error('Account not found on this device. Please sign up first.');\n    const creds = JSON.parse(raw) as StoredCredentials;\n    if (hashPassword(password) !== creds.hashedPassword) throw new Error('Invalid email or password');\n    const user: AuthUser = {\n      id: btoa(email.trim().toLowerCase()),\n      name: creds.name,\n      email: creds.email,\n      plan: creds.plan,\n      avatar: null,\n    };\n    localStorage.setItem('cryptosniper_user', JSON.stringify(user));\n    return user;\n  },\n\n  /**\n   * Send a password reset email (Supabase managed).\n   * Falls back to message in demo mode.\n   */\n  async resetPassword(email: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return { ok: true, message: 'Demo mode: use the local reset to update password on this device.' };\n    }\n    const redirectTo =\n      typeof window !== 'undefined'\n        ? `${window.location.origin}${window.location.pathname}`\n        : undefined;\n    const { error } = await sb.auth.resetPasswordForEmail(email, { redirectTo });\n    if (error) throw error;\n    return { ok: true, message: 'If an account exists, a reset link has been sent to your email.' };\n  },\n\n  /**\n   * Send a magic link/OTP sign-in (Supabase managed).\n   */\n  async sendMagicLink(email: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) {\n      return { ok: false, message: 'Magic link is only available with managed auth.' };\n    }\n    const redirectTo =\n      typeof window !== 'undefined'\n        ? `${window.location.origin}${window.location.pathname}`\n        : undefined;\n    const { error } = await sb.auth.signInWithOtp({ email, options: { emailRedirectTo: redirectTo } });\n    if (error) throw error;\n    return { ok: true, message: 'Magic link sent. Check your inbox.' };\n  },\n\n  /**\n   * Update password for the currently authenticated managed user.\n   */\n  async updatePassword(newPassword: string): Promise<{ ok: boolean; message: string }> {\n    const sb = ensureSupabase();\n    if (!sb) return { ok: false, message: 'Not available in demo mode.' };\n    const { error } = await sb.auth.updateUser({ password: newPassword });\n    if (error) throw error;\n    return { ok: true, message: 'Password updated.' };\n  },\n\n  /**\n   * Sign out the current user.\n   */\n  async signOut(): Promise<void> {\n    const sb = ensureSupabase();\n    if (sb) {\n      await sb.auth.signOut();\n      return;\n    }\n    localStorage.removeItem('cryptosniper_user');\n  },\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}