{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Hook for managing snipe configuration storage and retrieval\n */\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport WixIntegration from '../utils/wixIntegration';\nexport function useSnipeConfigStorage() {\n  _s();\n  const [savedConfigs, setSavedConfigs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const wixIntegration = WixIntegration.getInstance();\n\n  /**\n   * Load saved configurations on mount\n   */\n  useEffect(() => {\n    loadSavedConfigs();\n  }, []);\n\n  /**\n   * Load all saved configurations from storage\n   */\n  const loadSavedConfigs = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      if (wixIntegration.isWix()) {\n        // Load from Wix database\n        const configs = await wixIntegration.getSnipeConfigs();\n        setSavedConfigs(configs);\n      } else {\n        // Load from localStorage\n        const saved = localStorage.getItem('cryptosniper_saved_configs');\n        if (saved) {\n          const configs = JSON.parse(saved);\n          setSavedConfigs(configs);\n        }\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to load saved configurations');\n      console.error('Error loading saved configs:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Save a snipe configuration\n   */\n  const saveConfig = async (config, name, description) => {\n    setError(null);\n    try {\n      const savedConfig = {\n        ...config,\n        id: uuidv4(),\n        name,\n        description,\n        lastUsed: Date.now(),\n        favorite: false\n      };\n      if (wixIntegration.isWix()) {\n        // Save to Wix database\n        await wixIntegration.saveSnipeConfig(savedConfig);\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Save to localStorage\n        const updatedConfigs = [...savedConfigs, savedConfig];\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to save configuration');\n      console.error('Error saving config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Load a specific configuration\n   */\n  const loadConfig = configId => {\n    const config = savedConfigs.find(c => c.id === configId);\n    if (config) {\n      // Update last used timestamp\n      updateLastUsed(configId);\n      return config;\n    }\n    return null;\n  };\n\n  /**\n   * Delete a saved configuration\n   */\n  const deleteConfig = async configId => {\n    setError(null);\n    try {\n      if (wixIntegration.isWix()) {\n        // Delete from Wix database\n        await fetch('/_functions/deleteSnipeConfig', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            configId\n          })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Delete from localStorage\n        const updatedConfigs = savedConfigs.filter(c => c.id !== configId);\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to delete configuration');\n      console.error('Error deleting config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Toggle favorite status of a configuration\n   */\n  const favoriteConfig = async (configId, favorite) => {\n    setError(null);\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            configId,\n            updates: {\n              favorite\n            }\n          })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config => config.id === configId ? {\n          ...config,\n          favorite\n        } : config);\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to update configuration');\n      console.error('Error updating config favorite:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Update last used timestamp\n   */\n  const updateLastUsed = async configId => {\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          body: JSON.stringify({\n            configId,\n            updates: {\n              lastUsed: Date.now()\n            }\n          })\n        });\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config => config.id === configId ? {\n          ...config,\n          lastUsed: Date.now()\n        } : config);\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err) {\n      console.error('Error updating last used:', err);\n    }\n  };\n  return {\n    savedConfigs,\n    saveConfig,\n    loadConfig,\n    deleteConfig,\n    favoriteConfig,\n    isLoading,\n    error\n  };\n}\n_s(useSnipeConfigStorage, \"Ji6yPu+wRN4c8aQal/FaPOsKNBc=\");","map":{"version":3,"names":["useState","useEffect","v4","uuidv4","WixIntegration","useSnipeConfigStorage","_s","savedConfigs","setSavedConfigs","isLoading","setIsLoading","error","setError","wixIntegration","getInstance","loadSavedConfigs","isWix","configs","getSnipeConfigs","saved","localStorage","getItem","JSON","parse","err","message","console","saveConfig","config","name","description","savedConfig","id","lastUsed","Date","now","favorite","saveSnipeConfig","updatedConfigs","setItem","stringify","loadConfig","configId","find","c","updateLastUsed","deleteConfig","fetch","method","headers","credentials","body","filter","favoriteConfig","updates","map"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useSnipeConfigStorage.ts"],"sourcesContent":["/**\n * Hook for managing snipe configuration storage and retrieval\n */\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SnipeConfig } from '../types/trading';\nimport WixIntegration from '../utils/wixIntegration';\n\ninterface SavedSnipeConfig extends SnipeConfig {\n  name: string;\n  description?: string;\n  lastUsed: number;\n  favorite: boolean;\n}\n\ninterface UseSnipeConfigStorageReturn {\n  savedConfigs: SavedSnipeConfig[];\n  saveConfig: (config: SnipeConfig, name: string, description?: string) => Promise<void>;\n  loadConfig: (configId: string) => SavedSnipeConfig | null;\n  deleteConfig: (configId: string) => Promise<void>;\n  favoriteConfig: (configId: string, favorite: boolean) => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function useSnipeConfigStorage(): UseSnipeConfigStorageReturn {\n  const [savedConfigs, setSavedConfigs] = useState<SavedSnipeConfig[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const wixIntegration = WixIntegration.getInstance();\n\n  /**\n   * Load saved configurations on mount\n   */\n  useEffect(() => {\n    loadSavedConfigs();\n  }, []);\n\n  /**\n   * Load all saved configurations from storage\n   */\n  const loadSavedConfigs = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Load from Wix database\n        const configs = await wixIntegration.getSnipeConfigs();\n        setSavedConfigs(configs);\n      } else {\n        // Load from localStorage\n        const saved = localStorage.getItem('cryptosniper_saved_configs');\n        if (saved) {\n          const configs = JSON.parse(saved);\n          setSavedConfigs(configs);\n        }\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load saved configurations');\n      console.error('Error loading saved configs:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Save a snipe configuration\n   */\n  const saveConfig = async (config: SnipeConfig, name: string, description?: string) => {\n    setError(null);\n\n    try {\n      const savedConfig: SavedSnipeConfig = {\n        ...config,\n        id: uuidv4(),\n        name,\n        description,\n        lastUsed: Date.now(),\n        favorite: false,\n      };\n\n      if (wixIntegration.isWix()) {\n        // Save to Wix database\n        await wixIntegration.saveSnipeConfig(savedConfig);\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Save to localStorage\n        const updatedConfigs = [...savedConfigs, savedConfig];\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to save configuration');\n      console.error('Error saving config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Load a specific configuration\n   */\n  const loadConfig = (configId: string): SavedSnipeConfig | null => {\n    const config = savedConfigs.find(c => c.id === configId);\n    if (config) {\n      // Update last used timestamp\n      updateLastUsed(configId);\n      return config;\n    }\n    return null;\n  };\n\n  /**\n   * Delete a saved configuration\n   */\n  const deleteConfig = async (configId: string) => {\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Delete from Wix database\n        await fetch('/_functions/deleteSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Delete from localStorage\n        const updatedConfigs = savedConfigs.filter(c => c.id !== configId);\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete configuration');\n      console.error('Error deleting config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Toggle favorite status of a configuration\n   */\n  const favoriteConfig = async (configId: string, favorite: boolean) => {\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId, updates: { favorite } })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config =>\n          config.id === configId ? { ...config, favorite } : config\n        );\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to update configuration');\n      console.error('Error updating config favorite:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Update last used timestamp\n   */\n  const updateLastUsed = async (configId: string) => {\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId, updates: { lastUsed: Date.now() } })\n        });\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config =>\n          config.id === configId ? { ...config, lastUsed: Date.now() } : config\n        );\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      console.error('Error updating last used:', err);\n    }\n  };\n\n  return {\n    savedConfigs,\n    saveConfig,\n    loadConfig,\n    deleteConfig,\n    favoriteConfig,\n    isLoading,\n    error,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}