{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Real MetaMask wallet integration hook\n * Simplified version without ethers dependency\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n/**\n * Hook for real MetaMask wallet integration\n * Handles wallet connection, balance reading, and network switching\n */\nexport function useRealMetaMask() {\n  _s();\n  const [walletState, setWalletState] = useState({\n    isConnected: false,\n    address: null,\n    balance: '0',\n    chainId: null,\n    provider: null\n  });\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Check if MetaMask is installed\n   */\n  const isMetaMaskInstalled = useCallback(() => {\n    if (typeof window === 'undefined') return false;\n    return !!(window.ethereum && window.ethereum.isMetaMask);\n  }, []);\n\n  /**\n   * Convert hex to decimal\n   */\n  const hexToDecimal = hex => {\n    return parseInt(hex, 16);\n  };\n\n  /**\n   * Convert Wei to Eth (simplified)\n   */\n  const weiToEth = wei => {\n    try {\n      const weiValue = BigInt(wei);\n      const ethValue = Number(weiValue) / 1e18;\n      return ethValue.toFixed(4);\n    } catch (error) {\n      console.error('Error converting wei to eth:', error);\n      return '0.0000';\n    }\n  };\n\n  /**\n   * Connect to MetaMask wallet\n   */\n  const connect = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Check if MetaMask is installed\n      if (!isMetaMaskInstalled()) {\n        throw new Error('MetaMask is not installed. Please install MetaMask extension to continue.');\n      }\n\n      // Check if ethereum object exists\n      if (!window.ethereum) {\n        throw new Error('Ethereum provider not found. Please make sure MetaMask is properly installed.');\n      }\n      console.log('🔄 Attempting to connect to MetaMask...');\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found. Please make sure you have accounts in MetaMask and try again.');\n      }\n      const address = accounts[0];\n      console.log('📱 Account found:', address);\n\n      // Get balance\n      let balance = '0';\n      try {\n        const balanceHex = await window.ethereum.request({\n          method: 'eth_getBalance',\n          params: [address, 'latest']\n        });\n        balance = weiToEth(balanceHex);\n        console.log('💰 Balance retrieved:', balance, 'ETH');\n      } catch (balanceError) {\n        console.warn('⚠️ Could not retrieve balance:', balanceError);\n        balance = '0.0000';\n      }\n\n      // Get chain ID\n      let chainId = null;\n      try {\n        const chainIdHex = await window.ethereum.request({\n          method: 'eth_chainId'\n        });\n        chainId = hexToDecimal(chainIdHex);\n        console.log('🌐 Network detected:', chainId);\n      } catch (chainError) {\n        console.warn('⚠️ Could not retrieve chain ID:', chainError);\n        chainId = 1; // Default to mainnet\n      }\n      setWalletState({\n        isConnected: true,\n        address,\n        balance,\n        chainId,\n        provider: window.ethereum\n      });\n      console.log('✅ MetaMask connected successfully!');\n    } catch (err) {\n      console.error('❌ MetaMask connection failed:', err);\n      let errorMessage = 'Failed to connect to MetaMask';\n      if (err.code === 4001) {\n        errorMessage = 'Connection rejected by user. Please approve the connection request.';\n      } else if (err.code === -32002) {\n        errorMessage = 'MetaMask is already processing a request. Please check MetaMask extension.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMetaMaskInstalled]);\n\n  /**\n   * Disconnect wallet\n   */\n  const disconnect = useCallback(() => {\n    setWalletState({\n      isConnected: false,\n      address: null,\n      balance: '0',\n      chainId: null,\n      provider: null\n    });\n    setError(null);\n    console.log('🔌 Wallet disconnected');\n  }, []);\n\n  /**\n   * Switch network\n   */\n  const switchNetwork = useCallback(async chainId => {\n    if (!walletState.provider) {\n      setError('Wallet not connected');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: `0x${chainId.toString(16)}`\n        }]\n      });\n      console.log(`✅ Switched to network ${chainId}`);\n\n      // Update chain ID in state\n      setWalletState(prev => ({\n        ...prev,\n        chainId\n      }));\n    } catch (err) {\n      console.error('❌ Network switch failed:', err);\n\n      // If network doesn't exist, try to add it (for mainnet)\n      if (err.code === 4902 && chainId === 1) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x1',\n              chainName: 'Ethereum Mainnet',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18\n              },\n              rpcUrls: ['https://mainnet.infura.io/v3/'],\n              blockExplorerUrls: ['https://etherscan.io/']\n            }]\n          });\n        } catch (addError) {\n          setError('Failed to add Ethereum network');\n          console.error('❌ Add network error:', addError);\n        }\n      } else {\n        setError('Failed to switch network');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [walletState.provider]);\n\n  /**\n   * Listen for account changes\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled() || !window.ethereum) return;\n    const handleAccountsChanged = accounts => {\n      console.log('🔄 Accounts changed:', accounts);\n      if (accounts.length === 0) {\n        disconnect();\n      } else if (accounts[0] !== walletState.address) {\n        // Auto-reconnect with new account\n        connect();\n      }\n    };\n    const handleChainChanged = chainId => {\n      console.log('🌐 Chain changed:', chainId);\n      setWalletState(prev => ({\n        ...prev,\n        chainId: hexToDecimal(chainId)\n      }));\n    };\n    const handleConnect = connectInfo => {\n      console.log('🔗 MetaMask connected:', connectInfo);\n    };\n    const handleDisconnect = error => {\n      console.log('🔌 MetaMask disconnected:', error);\n      disconnect();\n    };\n\n    // Add event listeners\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    window.ethereum.on('connect', handleConnect);\n    window.ethereum.on('disconnect', handleDisconnect);\n    return () => {\n      // Remove event listeners\n      if (window.ethereum && window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('connect', handleConnect);\n        window.ethereum.removeListener('disconnect', handleDisconnect);\n      }\n    };\n  }, [isMetaMaskInstalled, walletState.address, connect, disconnect]);\n\n  /**\n   * Check for existing connection on mount\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n    const checkConnection = async () => {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts && accounts.length > 0) {\n          console.log('🔄 Found existing connection, auto-connecting...');\n          // Auto-connect if already authorized\n          connect();\n        }\n      } catch (err) {\n        console.error('❌ Failed to check existing connection:', err);\n      }\n    };\n    checkConnection();\n  }, [isMetaMaskInstalled, connect]);\n  return {\n    ...walletState,\n    connect,\n    disconnect,\n    switchNetwork,\n    error,\n    isLoading\n  };\n}\n\n/**\n * TypeScript declarations for ethereum object\n */\n_s(useRealMetaMask, \"5Ck7ZG7NYoOZst2bnoloD8nC+BQ=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRealMetaMask","_s","walletState","setWalletState","isConnected","address","balance","chainId","provider","error","setError","isLoading","setIsLoading","isMetaMaskInstalled","window","ethereum","isMetaMask","hexToDecimal","hex","parseInt","weiToEth","wei","weiValue","BigInt","ethValue","Number","toFixed","console","connect","Error","log","accounts","request","method","length","balanceHex","params","balanceError","warn","chainIdHex","chainError","err","errorMessage","code","message","disconnect","switchNetwork","toString","prev","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","handleAccountsChanged","handleChainChanged","handleConnect","connectInfo","handleDisconnect","on","removeListener","checkConnection"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useRealMetaMask.ts"],"sourcesContent":["/**\n * Real MetaMask wallet integration hook\n * Simplified version without ethers dependency\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface WalletState {\n  isConnected: boolean;\n  address: string | null;\n  balance: string;\n  chainId: number | null;\n  provider: any;\n}\n\ninterface UseRealMetaMaskReturn extends WalletState {\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  switchNetwork: (chainId: number) => Promise<void>;\n  error: string | null;\n  isLoading: boolean;\n}\n\n/**\n * Hook for real MetaMask wallet integration\n * Handles wallet connection, balance reading, and network switching\n */\nexport function useRealMetaMask(): UseRealMetaMaskReturn {\n  const [walletState, setWalletState] = useState<WalletState>({\n    isConnected: false,\n    address: null,\n    balance: '0',\n    chainId: null,\n    provider: null,\n  });\n\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Check if MetaMask is installed\n   */\n  const isMetaMaskInstalled = useCallback(() => {\n    if (typeof window === 'undefined') return false;\n    \n    return !!(\n      window.ethereum && \n      window.ethereum.isMetaMask\n    );\n  }, []);\n\n  /**\n   * Convert hex to decimal\n   */\n  const hexToDecimal = (hex: string): number => {\n    return parseInt(hex, 16);\n  };\n\n  /**\n   * Convert Wei to Eth (simplified)\n   */\n  const weiToEth = (wei: string): string => {\n    try {\n      const weiValue = BigInt(wei);\n      const ethValue = Number(weiValue) / 1e18;\n      return ethValue.toFixed(4);\n    } catch (error) {\n      console.error('Error converting wei to eth:', error);\n      return '0.0000';\n    }\n  };\n\n  /**\n   * Connect to MetaMask wallet\n   */\n  const connect = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Check if MetaMask is installed\n      if (!isMetaMaskInstalled()) {\n        throw new Error('MetaMask is not installed. Please install MetaMask extension to continue.');\n      }\n\n      // Check if ethereum object exists\n      if (!window.ethereum) {\n        throw new Error('Ethereum provider not found. Please make sure MetaMask is properly installed.');\n      }\n\n      console.log('🔄 Attempting to connect to MetaMask...');\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found. Please make sure you have accounts in MetaMask and try again.');\n      }\n\n      const address = accounts[0];\n      console.log('📱 Account found:', address);\n\n      // Get balance\n      let balance = '0';\n      try {\n        const balanceHex = await window.ethereum.request({\n          method: 'eth_getBalance',\n          params: [address, 'latest'],\n        });\n        balance = weiToEth(balanceHex);\n        console.log('💰 Balance retrieved:', balance, 'ETH');\n      } catch (balanceError) {\n        console.warn('⚠️ Could not retrieve balance:', balanceError);\n        balance = '0.0000';\n      }\n\n      // Get chain ID\n      let chainId = null;\n      try {\n        const chainIdHex = await window.ethereum.request({\n          method: 'eth_chainId',\n        });\n        chainId = hexToDecimal(chainIdHex);\n        console.log('🌐 Network detected:', chainId);\n      } catch (chainError) {\n        console.warn('⚠️ Could not retrieve chain ID:', chainError);\n        chainId = 1; // Default to mainnet\n      }\n\n      setWalletState({\n        isConnected: true,\n        address,\n        balance,\n        chainId,\n        provider: window.ethereum,\n      });\n\n      console.log('✅ MetaMask connected successfully!');\n    } catch (err: any) {\n      console.error('❌ MetaMask connection failed:', err);\n      \n      let errorMessage = 'Failed to connect to MetaMask';\n      \n      if (err.code === 4001) {\n        errorMessage = 'Connection rejected by user. Please approve the connection request.';\n      } else if (err.code === -32002) {\n        errorMessage = 'MetaMask is already processing a request. Please check MetaMask extension.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMetaMaskInstalled]);\n\n  /**\n   * Disconnect wallet\n   */\n  const disconnect = useCallback(() => {\n    setWalletState({\n      isConnected: false,\n      address: null,\n      balance: '0',\n      chainId: null,\n      provider: null,\n    });\n    setError(null);\n    console.log('🔌 Wallet disconnected');\n  }, []);\n\n  /**\n   * Switch network\n   */\n  const switchNetwork = useCallback(async (chainId: number) => {\n    if (!walletState.provider) {\n      setError('Wallet not connected');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }],\n      });\n      \n      console.log(`✅ Switched to network ${chainId}`);\n      \n      // Update chain ID in state\n      setWalletState(prev => ({\n        ...prev,\n        chainId,\n      }));\n    } catch (err: any) {\n      console.error('❌ Network switch failed:', err);\n      \n      // If network doesn't exist, try to add it (for mainnet)\n      if (err.code === 4902 && chainId === 1) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x1',\n              chainName: 'Ethereum Mainnet',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18,\n              },\n              rpcUrls: ['https://mainnet.infura.io/v3/'],\n              blockExplorerUrls: ['https://etherscan.io/'],\n            }],\n          });\n        } catch (addError) {\n          setError('Failed to add Ethereum network');\n          console.error('❌ Add network error:', addError);\n        }\n      } else {\n        setError('Failed to switch network');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [walletState.provider]);\n\n  /**\n   * Listen for account changes\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled() || !window.ethereum) return;\n\n    const handleAccountsChanged = (accounts: string[]) => {\n      console.log('🔄 Accounts changed:', accounts);\n      \n      if (accounts.length === 0) {\n        disconnect();\n      } else if (accounts[0] !== walletState.address) {\n        // Auto-reconnect with new account\n        connect();\n      }\n    };\n\n    const handleChainChanged = (chainId: string) => {\n      console.log('🌐 Chain changed:', chainId);\n      \n      setWalletState(prev => ({\n        ...prev,\n        chainId: hexToDecimal(chainId),\n      }));\n    };\n\n    const handleConnect = (connectInfo: any) => {\n      console.log('🔗 MetaMask connected:', connectInfo);\n    };\n\n    const handleDisconnect = (error: any) => {\n      console.log('🔌 MetaMask disconnected:', error);\n      disconnect();\n    };\n\n    // Add event listeners\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    window.ethereum.on('connect', handleConnect);\n    window.ethereum.on('disconnect', handleDisconnect);\n\n    return () => {\n      // Remove event listeners\n      if (window.ethereum && window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('connect', handleConnect);\n        window.ethereum.removeListener('disconnect', handleDisconnect);\n      }\n    };\n  }, [isMetaMaskInstalled, walletState.address, connect, disconnect]);\n\n  /**\n   * Check for existing connection on mount\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n\n    const checkConnection = async () => {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts',\n        });\n\n        if (accounts && accounts.length > 0) {\n          console.log('🔄 Found existing connection, auto-connecting...');\n          // Auto-connect if already authorized\n          connect();\n        }\n      } catch (err) {\n        console.error('❌ Failed to check existing connection:', err);\n      }\n    };\n\n    checkConnection();\n  }, [isMetaMaskInstalled, connect]);\n\n  return {\n    ...walletState,\n    connect,\n    disconnect,\n    switchNetwork,\n    error,\n    isLoading,\n  };\n}\n\n/**\n * TypeScript declarations for ethereum object\n */\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}