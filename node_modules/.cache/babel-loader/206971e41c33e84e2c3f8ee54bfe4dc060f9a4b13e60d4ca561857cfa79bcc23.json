{"ast":null,"code":"/**\n * useNetworkStatus - simple hook to detect current EVM network and switch to Mainnet\n */import{useCallback,useEffect,useState}from'react';/**\n * Translate chainId to a friendly name\n */function getNetworkNameFromId(id){if(id==null)return'Not connected';switch(id){case 1:return'Ethereum Mainnet';case 5:return'Goerli Testnet';case 11155111:return'Sepolia Testnet';case 137:return'Polygon';case 56:return'BSC';default:return`Chain ${id}`;}}/**\n * useNetworkStatus\n * Detects network via window.ethereum and exposes a method to switch to mainnet.\n */export function useNetworkStatus(){const[chainId,setChainId]=useState(null);const[isDetecting,setIsDetecting]=useState(true);const detectChain=useCallback(async()=>{try{if(!window.ethereum){setChainId(null);return;}const chainHex=await window.ethereum.request({method:'eth_chainId'});const id=parseInt(chainHex,16);setChainId(Number.isFinite(id)?id:null);}catch(err){setChainId(null);console.warn('Failed to detect chain:',err);}finally{setIsDetecting(false);}},[]);const handleChainChanged=useCallback(hexId=>{const id=parseInt(hexId,16);setChainId(Number.isFinite(id)?id:null);},[]);useEffect(()=>{detectChain();if(window.ethereum&&window.ethereum.on){window.ethereum.on('chainChanged',handleChainChanged);return()=>{try{window.ethereum.removeListener('chainChanged',handleChainChanged);}catch{// no-op\n}};}},[detectChain,handleChainChanged]);const switchToMainnet=useCallback(async()=>{try{if(!window.ethereum)return false;await window.ethereum.request({method:'wallet_switchEthereumChain',params:[{chainId:'0x1'}]});// allow wallet UI to settle\nawait new Promise(r=>setTimeout(r,800));await detectChain();return true;}catch(err){console.error('Failed to switch to mainnet:',err);return false;}},[detectChain]);const isMainnet=chainId===1;const networkName=getNetworkNameFromId(chainId);return{chainId,isMainnet,networkName,isDetecting,switchToMainnet};}// Window typing","map":{"version":3,"names":["useCallback","useEffect","useState","getNetworkNameFromId","id","useNetworkStatus","chainId","setChainId","isDetecting","setIsDetecting","detectChain","window","ethereum","chainHex","request","method","parseInt","Number","isFinite","err","console","warn","handleChainChanged","hexId","on","removeListener","switchToMainnet","params","Promise","r","setTimeout","error","isMainnet","networkName"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useNetworkStatus.ts"],"sourcesContent":["/**\n * useNetworkStatus - simple hook to detect current EVM network and switch to Mainnet\n */\n\nimport { useCallback, useEffect, useState } from 'react';\n\ninterface NetworkStatus {\n  chainId: number | null;\n  isMainnet: boolean;\n  networkName: string;\n  isDetecting: boolean;\n  switchToMainnet: () => Promise<boolean>;\n}\n\n/**\n * Translate chainId to a friendly name\n */\nfunction getNetworkNameFromId(id: number | null): string {\n  if (id == null) return 'Not connected';\n  switch (id) {\n    case 1:\n      return 'Ethereum Mainnet';\n    case 5:\n      return 'Goerli Testnet';\n    case 11155111:\n      return 'Sepolia Testnet';\n    case 137:\n      return 'Polygon';\n    case 56:\n      return 'BSC';\n    default:\n      return `Chain ${id}`;\n  }\n}\n\n/**\n * useNetworkStatus\n * Detects network via window.ethereum and exposes a method to switch to mainnet.\n */\nexport function useNetworkStatus(): NetworkStatus {\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isDetecting, setIsDetecting] = useState<boolean>(true);\n\n  const detectChain = useCallback(async () => {\n    try {\n      if (!window.ethereum) {\n        setChainId(null);\n        return;\n      }\n      const chainHex = await window.ethereum.request({ method: 'eth_chainId' });\n      const id = parseInt(chainHex, 16);\n      setChainId(Number.isFinite(id) ? id : null);\n    } catch (err) {\n      setChainId(null);\n      console.warn('Failed to detect chain:', err);\n    } finally {\n      setIsDetecting(false);\n    }\n  }, []);\n\n  const handleChainChanged = useCallback((hexId: string) => {\n    const id = parseInt(hexId, 16);\n    setChainId(Number.isFinite(id) ? id : null);\n  }, []);\n\n  useEffect(() => {\n    detectChain();\n\n    if (window.ethereum && window.ethereum.on) {\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        try {\n          window.ethereum.removeListener('chainChanged', handleChainChanged);\n        } catch {\n          // no-op\n        }\n      };\n    }\n  }, [detectChain, handleChainChanged]);\n\n  const switchToMainnet = useCallback(async () => {\n    try {\n      if (!window.ethereum) return false;\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x1' }],\n      });\n      // allow wallet UI to settle\n      await new Promise((r) => setTimeout(r, 800));\n      await detectChain();\n      return true;\n    } catch (err) {\n      console.error('Failed to switch to mainnet:', err);\n      return false;\n    }\n  }, [detectChain]);\n\n  const isMainnet = chainId === 1;\n  const networkName = getNetworkNameFromId(chainId);\n\n  return { chainId, isMainnet, networkName, isDetecting, switchToMainnet };\n}\n\n// Window typing\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}