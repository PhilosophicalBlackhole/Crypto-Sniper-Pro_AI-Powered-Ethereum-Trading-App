{"ast":null,"code":"/**\n * Web3 service for blockchain interactions on testnets\n */\n\n// Basic Web3 functionality without external dependencies\n\nexport const TESTNETS = {\n  goerli: {\n    chainId: 5,\n    rpcUrl: 'https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n    explorerUrl: 'https://goerli.etherscan.io',\n    name: 'Goerli Testnet',\n    currency: 'GoerliETH'\n  },\n  sepolia: {\n    chainId: 11155111,\n    rpcUrl: 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n    explorerUrl: 'https://sepolia.etherscan.io',\n    name: 'Sepolia Testnet',\n    currency: 'SepoliaETH'\n  }\n};\nexport class Web3Service {\n  constructor(chainId) {\n    this.provider = void 0;\n    this.chainConfig = void 0;\n    this.chainConfig = Object.values(TESTNETS).find(config => config.chainId === chainId) || TESTNETS.sepolia;\n  }\n  async connectProvider() {\n    if (window.ethereum) {\n      this.provider = window.ethereum;\n      return true;\n    }\n    return false;\n  }\n  async switchToTestnet(chainId) {\n    try {\n      if (!window.ethereum) return false;\n      const chainHex = `0x${chainId.toString(16)}`;\n\n      // Try to switch to the network\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: chainHex\n          }]\n        });\n        return true;\n      } catch (switchError) {\n        // Network not added, try to add it\n        if (switchError.code === 4902) {\n          const config = Object.values(TESTNETS).find(c => c.chainId === chainId);\n          if (!config) return false;\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: chainHex,\n              chainName: config.name,\n              rpcUrls: [config.rpcUrl],\n              blockExplorerUrls: [config.explorerUrl],\n              nativeCurrency: {\n                name: config.currency,\n                symbol: config.currency.replace('ETH', 'ETH'),\n                decimals: 18\n              }\n            }]\n          });\n          return true;\n        }\n        throw switchError;\n      }\n    } catch (error) {\n      console.error('Failed to switch network:', error);\n      return false;\n    }\n  }\n  async getBalance(address) {\n    try {\n      if (!window.ethereum) return '0';\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [address, 'latest']\n      });\n\n      // Convert from Wei to ETH\n      const balanceInEth = parseInt(balance, 16) / 1e18;\n      return balanceInEth.toFixed(6);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      return '0';\n    }\n  }\n  async getTokenBalance(tokenAddress, walletAddress) {\n    try {\n      if (!window.ethereum) return '0';\n\n      // ERC-20 balanceOf function signature\n      const data = `0x70a08231000000000000000000000000${walletAddress.slice(2)}`;\n      const result = await window.ethereum.request({\n        method: 'eth_call',\n        params: [{\n          to: tokenAddress,\n          data: data\n        }, 'latest']\n      });\n      const balance = parseInt(result, 16);\n      return (balance / 1e18).toFixed(6);\n    } catch (error) {\n      console.error('Error fetching token balance:', error);\n      return '0';\n    }\n  }\n  async sendTestTransaction(to, amount) {\n    try {\n      if (!window.ethereum) throw new Error('No wallet connected');\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [{\n          from: accounts[0],\n          to: to,\n          value: `0x${(parseFloat(amount) * 1e18).toString(16)}`,\n          gas: '0x5208' // 21000\n        }]\n      });\n      return txHash;\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      throw error;\n    }\n  }\n  async getTransactionReceipt(txHash) {\n    try {\n      if (!window.ethereum) return null;\n      return await window.ethereum.request({\n        method: 'eth_getTransactionReceipt',\n        params: [txHash]\n      });\n    } catch (error) {\n      console.error('Error fetching transaction receipt:', error);\n      return null;\n    }\n  }\n  getExplorerUrl(txHash) {\n    return `${this.chainConfig.explorerUrl}/tx/${txHash}`;\n  }\n  getAddressUrl(address) {\n    return `${this.chainConfig.explorerUrl}/address/${address}`;\n  }\n  getChainConfig() {\n    return this.chainConfig;\n  }\n}","map":{"version":3,"names":["TESTNETS","goerli","chainId","rpcUrl","explorerUrl","name","currency","sepolia","Web3Service","constructor","provider","chainConfig","Object","values","find","config","connectProvider","window","ethereum","switchToTestnet","chainHex","toString","request","method","params","switchError","code","c","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","replace","decimals","error","console","getBalance","address","balance","balanceInEth","parseInt","toFixed","getTokenBalance","tokenAddress","walletAddress","data","slice","result","to","sendTestTransaction","amount","Error","accounts","txHash","from","value","parseFloat","gas","getTransactionReceipt","getExplorerUrl","getAddressUrl","getChainConfig"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/services/web3.ts"],"sourcesContent":["/**\n * Web3 service for blockchain interactions on testnets\n */\n\n// Basic Web3 functionality without external dependencies\nexport interface Web3Config {\n  chainId: number;\n  rpcUrl: string;\n  explorerUrl: string;\n  name: string;\n  currency: string;\n}\n\nexport const TESTNETS: Record<string, Web3Config> = {\n  goerli: {\n    chainId: 5,\n    rpcUrl: 'https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n    explorerUrl: 'https://goerli.etherscan.io',\n    name: 'Goerli Testnet',\n    currency: 'GoerliETH',\n  },\n  sepolia: {\n    chainId: 11155111,\n    rpcUrl: 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n    explorerUrl: 'https://sepolia.etherscan.io',\n    name: 'Sepolia Testnet',\n    currency: 'SepoliaETH',\n  },\n};\n\nexport class Web3Service {\n  private provider: any;\n  private chainConfig: Web3Config;\n\n  constructor(chainId: number) {\n    this.chainConfig = Object.values(TESTNETS).find(config => config.chainId === chainId) || TESTNETS.sepolia;\n  }\n\n  async connectProvider() {\n    if (window.ethereum) {\n      this.provider = window.ethereum;\n      return true;\n    }\n    return false;\n  }\n\n  async switchToTestnet(chainId: number): Promise<boolean> {\n    try {\n      if (!window.ethereum) return false;\n\n      const chainHex = `0x${chainId.toString(16)}`;\n      \n      // Try to switch to the network\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainHex }],\n        });\n        return true;\n      } catch (switchError: any) {\n        // Network not added, try to add it\n        if (switchError.code === 4902) {\n          const config = Object.values(TESTNETS).find(c => c.chainId === chainId);\n          if (!config) return false;\n\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: chainHex,\n                chainName: config.name,\n                rpcUrls: [config.rpcUrl],\n                blockExplorerUrls: [config.explorerUrl],\n                nativeCurrency: {\n                  name: config.currency,\n                  symbol: config.currency.replace('ETH', 'ETH'),\n                  decimals: 18,\n                },\n              },\n            ],\n          });\n          return true;\n        }\n        throw switchError;\n      }\n    } catch (error) {\n      console.error('Failed to switch network:', error);\n      return false;\n    }\n  }\n\n  async getBalance(address: string): Promise<string> {\n    try {\n      if (!window.ethereum) return '0';\n      \n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [address, 'latest'],\n      });\n      \n      // Convert from Wei to ETH\n      const balanceInEth = parseInt(balance, 16) / 1e18;\n      return balanceInEth.toFixed(6);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      return '0';\n    }\n  }\n\n  async getTokenBalance(tokenAddress: string, walletAddress: string): Promise<string> {\n    try {\n      if (!window.ethereum) return '0';\n\n      // ERC-20 balanceOf function signature\n      const data = `0x70a08231000000000000000000000000${walletAddress.slice(2)}`;\n      \n      const result = await window.ethereum.request({\n        method: 'eth_call',\n        params: [\n          {\n            to: tokenAddress,\n            data: data,\n          },\n          'latest',\n        ],\n      });\n\n      const balance = parseInt(result, 16);\n      return (balance / 1e18).toFixed(6);\n    } catch (error) {\n      console.error('Error fetching token balance:', error);\n      return '0';\n    }\n  }\n\n  async sendTestTransaction(to: string, amount: string): Promise<string> {\n    try {\n      if (!window.ethereum) throw new Error('No wallet connected');\n\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      const txHash = await window.ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [\n          {\n            from: accounts[0],\n            to: to,\n            value: `0x${(parseFloat(amount) * 1e18).toString(16)}`,\n            gas: '0x5208', // 21000\n          },\n        ],\n      });\n\n      return txHash;\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      throw error;\n    }\n  }\n\n  async getTransactionReceipt(txHash: string) {\n    try {\n      if (!window.ethereum) return null;\n\n      return await window.ethereum.request({\n        method: 'eth_getTransactionReceipt',\n        params: [txHash],\n      });\n    } catch (error) {\n      console.error('Error fetching transaction receipt:', error);\n      return null;\n    }\n  }\n\n  getExplorerUrl(txHash: string): string {\n    return `${this.chainConfig.explorerUrl}/tx/${txHash}`;\n  }\n\n  getAddressUrl(address: string): string {\n    return `${this.chainConfig.explorerUrl}/address/${address}`;\n  }\n\n  getChainConfig(): Web3Config {\n    return this.chainConfig;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}