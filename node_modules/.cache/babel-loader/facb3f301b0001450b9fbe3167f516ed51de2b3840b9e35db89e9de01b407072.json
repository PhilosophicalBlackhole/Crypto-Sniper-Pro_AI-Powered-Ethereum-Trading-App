{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * useNetworkStatus - simple hook to detect current EVM network and switch to Mainnet\n */\n\nimport { useCallback, useEffect, useState } from 'react';\n/**\n * Translate chainId to a friendly name\n */\nfunction getNetworkNameFromId(id) {\n  if (id == null) return 'Not connected';\n  switch (id) {\n    case 1:\n      return 'Ethereum Mainnet';\n    case 5:\n      return 'Goerli Testnet';\n    case 11155111:\n      return 'Sepolia Testnet';\n    case 137:\n      return 'Polygon';\n    case 56:\n      return 'BSC';\n    default:\n      return `Chain ${id}`;\n  }\n}\n\n/**\n * useNetworkStatus\n * Detects network via window.ethereum and exposes a method to switch to mainnet.\n */\nexport function useNetworkStatus() {\n  _s();\n  const [chainId, setChainId] = useState(null);\n  const [isDetecting, setIsDetecting] = useState(true);\n  const detectChain = useCallback(async () => {\n    try {\n      if (!window.ethereum) {\n        setChainId(null);\n        return;\n      }\n      const chainHex = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n      const id = parseInt(chainHex, 16);\n      setChainId(Number.isFinite(id) ? id : null);\n    } catch (err) {\n      setChainId(null);\n      console.warn('Failed to detect chain:', err);\n    } finally {\n      setIsDetecting(false);\n    }\n  }, []);\n  const handleChainChanged = useCallback(hexId => {\n    const id = parseInt(hexId, 16);\n    setChainId(Number.isFinite(id) ? id : null);\n  }, []);\n  useEffect(() => {\n    detectChain();\n    if (window.ethereum && window.ethereum.on) {\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        try {\n          window.ethereum.removeListener('chainChanged', handleChainChanged);\n        } catch {\n          // no-op\n        }\n      };\n    }\n  }, [detectChain, handleChainChanged]);\n  const switchToMainnet = useCallback(async () => {\n    try {\n      if (!window.ethereum) return false;\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x1'\n        }]\n      });\n      // allow wallet UI to settle\n      await new Promise(r => setTimeout(r, 800));\n      await detectChain();\n      return true;\n    } catch (err) {\n      console.error('Failed to switch to mainnet:', err);\n      return false;\n    }\n  }, [detectChain]);\n  const isMainnet = chainId === 1;\n  const networkName = getNetworkNameFromId(chainId);\n  return {\n    chainId,\n    isMainnet,\n    networkName,\n    isDetecting,\n    switchToMainnet\n  };\n}\n\n// Window typing\n_s(useNetworkStatus, \"atxJP6DjdonG51tSe1LR1VOtU58=\");","map":{"version":3,"names":["useCallback","useEffect","useState","getNetworkNameFromId","id","useNetworkStatus","_s","chainId","setChainId","isDetecting","setIsDetecting","detectChain","window","ethereum","chainHex","request","method","parseInt","Number","isFinite","err","console","warn","handleChainChanged","hexId","on","removeListener","switchToMainnet","params","Promise","r","setTimeout","error","isMainnet","networkName"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useNetworkStatus.ts"],"sourcesContent":["/**\n * useNetworkStatus - simple hook to detect current EVM network and switch to Mainnet\n */\n\nimport { useCallback, useEffect, useState } from 'react';\n\ninterface NetworkStatus {\n  chainId: number | null;\n  isMainnet: boolean;\n  networkName: string;\n  isDetecting: boolean;\n  switchToMainnet: () => Promise<boolean>;\n}\n\n/**\n * Translate chainId to a friendly name\n */\nfunction getNetworkNameFromId(id: number | null): string {\n  if (id == null) return 'Not connected';\n  switch (id) {\n    case 1:\n      return 'Ethereum Mainnet';\n    case 5:\n      return 'Goerli Testnet';\n    case 11155111:\n      return 'Sepolia Testnet';\n    case 137:\n      return 'Polygon';\n    case 56:\n      return 'BSC';\n    default:\n      return `Chain ${id}`;\n  }\n}\n\n/**\n * useNetworkStatus\n * Detects network via window.ethereum and exposes a method to switch to mainnet.\n */\nexport function useNetworkStatus(): NetworkStatus {\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isDetecting, setIsDetecting] = useState<boolean>(true);\n\n  const detectChain = useCallback(async () => {\n    try {\n      if (!window.ethereum) {\n        setChainId(null);\n        return;\n      }\n      const chainHex = await window.ethereum.request({ method: 'eth_chainId' });\n      const id = parseInt(chainHex, 16);\n      setChainId(Number.isFinite(id) ? id : null);\n    } catch (err) {\n      setChainId(null);\n      console.warn('Failed to detect chain:', err);\n    } finally {\n      setIsDetecting(false);\n    }\n  }, []);\n\n  const handleChainChanged = useCallback((hexId: string) => {\n    const id = parseInt(hexId, 16);\n    setChainId(Number.isFinite(id) ? id : null);\n  }, []);\n\n  useEffect(() => {\n    detectChain();\n\n    if (window.ethereum && window.ethereum.on) {\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        try {\n          window.ethereum.removeListener('chainChanged', handleChainChanged);\n        } catch {\n          // no-op\n        }\n      };\n    }\n  }, [detectChain, handleChainChanged]);\n\n  const switchToMainnet = useCallback(async () => {\n    try {\n      if (!window.ethereum) return false;\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x1' }],\n      });\n      // allow wallet UI to settle\n      await new Promise((r) => setTimeout(r, 800));\n      await detectChain();\n      return true;\n    } catch (err) {\n      console.error('Failed to switch to mainnet:', err);\n      return false;\n    }\n  }, [detectChain]);\n\n  const isMainnet = chainId === 1;\n  const networkName = getNetworkNameFromId(chainId);\n\n  return { chainId, isMainnet, networkName, isDetecting, switchToMainnet };\n}\n\n// Window typing\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}