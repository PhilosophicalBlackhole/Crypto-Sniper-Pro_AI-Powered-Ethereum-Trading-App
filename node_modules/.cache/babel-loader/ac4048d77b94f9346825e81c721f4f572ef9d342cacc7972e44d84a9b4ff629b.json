{"ast":null,"code":"/**\n * Hook for managing snipe configuration storage and retrieval\n */import{useState,useEffect}from'react';import{v4 as uuidv4}from'uuid';import WixIntegration from'../utils/wixIntegration';export function useSnipeConfigStorage(){const[savedConfigs,setSavedConfigs]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const wixIntegration=WixIntegration.getInstance();/**\n   * Load saved configurations on mount\n   */useEffect(()=>{loadSavedConfigs();},[]);/**\n   * Load all saved configurations from storage\n   */const loadSavedConfigs=async()=>{setIsLoading(true);setError(null);try{if(wixIntegration.isWix()){// Load from Wix database\nconst configs=await wixIntegration.getSnipeConfigs();setSavedConfigs(configs);}else{// Load from localStorage\nconst saved=localStorage.getItem('cryptosniper_saved_configs');if(saved){const configs=JSON.parse(saved);setSavedConfigs(configs);}}}catch(err){setError(err.message||'Failed to load saved configurations');console.error('Error loading saved configs:',err);}finally{setIsLoading(false);}};/**\n   * Save a snipe configuration\n   */const saveConfig=async(config,name,description)=>{setError(null);try{const savedConfig={...config,id:uuidv4(),name,description,lastUsed:Date.now(),favorite:false};if(wixIntegration.isWix()){// Save to Wix database\nawait wixIntegration.saveSnipeConfig(savedConfig);await loadSavedConfigs();// Refresh list\n}else{// Save to localStorage\nconst updatedConfigs=[...savedConfigs,savedConfig];setSavedConfigs(updatedConfigs);localStorage.setItem('cryptosniper_saved_configs',JSON.stringify(updatedConfigs));}}catch(err){setError(err.message||'Failed to save configuration');console.error('Error saving config:',err);throw err;}};/**\n   * Load a specific configuration\n   */const loadConfig=configId=>{const config=savedConfigs.find(c=>c.id===configId);if(config){// Update last used timestamp\nupdateLastUsed(configId);return config;}return null;};/**\n   * Delete a saved configuration\n   */const deleteConfig=async configId=>{setError(null);try{if(wixIntegration.isWix()){// Delete from Wix database\nawait fetch('/_functions/deleteSnipeConfig',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify({configId})});await loadSavedConfigs();// Refresh list\n}else{// Delete from localStorage\nconst updatedConfigs=savedConfigs.filter(c=>c.id!==configId);setSavedConfigs(updatedConfigs);localStorage.setItem('cryptosniper_saved_configs',JSON.stringify(updatedConfigs));}}catch(err){setError(err.message||'Failed to delete configuration');console.error('Error deleting config:',err);throw err;}};/**\n   * Toggle favorite status of a configuration\n   */const favoriteConfig=async(configId,favorite)=>{setError(null);try{if(wixIntegration.isWix()){// Update in Wix database\nawait fetch('/_functions/updateSnipeConfig',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify({configId,updates:{favorite}})});await loadSavedConfigs();// Refresh list\n}else{// Update in localStorage\nconst updatedConfigs=savedConfigs.map(config=>config.id===configId?{...config,favorite}:config);setSavedConfigs(updatedConfigs);localStorage.setItem('cryptosniper_saved_configs',JSON.stringify(updatedConfigs));}}catch(err){setError(err.message||'Failed to update configuration');console.error('Error updating config favorite:',err);throw err;}};/**\n   * Update last used timestamp\n   */const updateLastUsed=async configId=>{try{if(wixIntegration.isWix()){// Update in Wix database\nawait fetch('/_functions/updateSnipeConfig',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'include',body:JSON.stringify({configId,updates:{lastUsed:Date.now()}})});}else{// Update in localStorage\nconst updatedConfigs=savedConfigs.map(config=>config.id===configId?{...config,lastUsed:Date.now()}:config);setSavedConfigs(updatedConfigs);localStorage.setItem('cryptosniper_saved_configs',JSON.stringify(updatedConfigs));}}catch(err){console.error('Error updating last used:',err);}};return{savedConfigs,saveConfig,loadConfig,deleteConfig,favoriteConfig,isLoading,error};}","map":{"version":3,"names":["useState","useEffect","v4","uuidv4","WixIntegration","useSnipeConfigStorage","savedConfigs","setSavedConfigs","isLoading","setIsLoading","error","setError","wixIntegration","getInstance","loadSavedConfigs","isWix","configs","getSnipeConfigs","saved","localStorage","getItem","JSON","parse","err","message","console","saveConfig","config","name","description","savedConfig","id","lastUsed","Date","now","favorite","saveSnipeConfig","updatedConfigs","setItem","stringify","loadConfig","configId","find","c","updateLastUsed","deleteConfig","fetch","method","headers","credentials","body","filter","favoriteConfig","updates","map"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useSnipeConfigStorage.ts"],"sourcesContent":["/**\n * Hook for managing snipe configuration storage and retrieval\n */\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SnipeConfig } from '../types/trading';\nimport WixIntegration from '../utils/wixIntegration';\n\ninterface SavedSnipeConfig extends SnipeConfig {\n  name: string;\n  description?: string;\n  lastUsed: number;\n  favorite: boolean;\n}\n\ninterface UseSnipeConfigStorageReturn {\n  savedConfigs: SavedSnipeConfig[];\n  saveConfig: (config: SnipeConfig, name: string, description?: string) => Promise<void>;\n  loadConfig: (configId: string) => SavedSnipeConfig | null;\n  deleteConfig: (configId: string) => Promise<void>;\n  favoriteConfig: (configId: string, favorite: boolean) => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function useSnipeConfigStorage(): UseSnipeConfigStorageReturn {\n  const [savedConfigs, setSavedConfigs] = useState<SavedSnipeConfig[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const wixIntegration = WixIntegration.getInstance();\n\n  /**\n   * Load saved configurations on mount\n   */\n  useEffect(() => {\n    loadSavedConfigs();\n  }, []);\n\n  /**\n   * Load all saved configurations from storage\n   */\n  const loadSavedConfigs = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Load from Wix database\n        const configs = await wixIntegration.getSnipeConfigs();\n        setSavedConfigs(configs);\n      } else {\n        // Load from localStorage\n        const saved = localStorage.getItem('cryptosniper_saved_configs');\n        if (saved) {\n          const configs = JSON.parse(saved);\n          setSavedConfigs(configs);\n        }\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load saved configurations');\n      console.error('Error loading saved configs:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Save a snipe configuration\n   */\n  const saveConfig = async (config: SnipeConfig, name: string, description?: string) => {\n    setError(null);\n\n    try {\n      const savedConfig: SavedSnipeConfig = {\n        ...config,\n        id: uuidv4(),\n        name,\n        description,\n        lastUsed: Date.now(),\n        favorite: false,\n      };\n\n      if (wixIntegration.isWix()) {\n        // Save to Wix database\n        await wixIntegration.saveSnipeConfig(savedConfig);\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Save to localStorage\n        const updatedConfigs = [...savedConfigs, savedConfig];\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to save configuration');\n      console.error('Error saving config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Load a specific configuration\n   */\n  const loadConfig = (configId: string): SavedSnipeConfig | null => {\n    const config = savedConfigs.find(c => c.id === configId);\n    if (config) {\n      // Update last used timestamp\n      updateLastUsed(configId);\n      return config;\n    }\n    return null;\n  };\n\n  /**\n   * Delete a saved configuration\n   */\n  const deleteConfig = async (configId: string) => {\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Delete from Wix database\n        await fetch('/_functions/deleteSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Delete from localStorage\n        const updatedConfigs = savedConfigs.filter(c => c.id !== configId);\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete configuration');\n      console.error('Error deleting config:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Toggle favorite status of a configuration\n   */\n  const favoriteConfig = async (configId: string, favorite: boolean) => {\n    setError(null);\n\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId, updates: { favorite } })\n        });\n        await loadSavedConfigs(); // Refresh list\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config =>\n          config.id === configId ? { ...config, favorite } : config\n        );\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to update configuration');\n      console.error('Error updating config favorite:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Update last used timestamp\n   */\n  const updateLastUsed = async (configId: string) => {\n    try {\n      if (wixIntegration.isWix()) {\n        // Update in Wix database\n        await fetch('/_functions/updateSnipeConfig', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ configId, updates: { lastUsed: Date.now() } })\n        });\n      } else {\n        // Update in localStorage\n        const updatedConfigs = savedConfigs.map(config =>\n          config.id === configId ? { ...config, lastUsed: Date.now() } : config\n        );\n        setSavedConfigs(updatedConfigs);\n        localStorage.setItem('cryptosniper_saved_configs', JSON.stringify(updatedConfigs));\n      }\n    } catch (err: any) {\n      console.error('Error updating last used:', err);\n    }\n  };\n\n  return {\n    savedConfigs,\n    saveConfig,\n    loadConfig,\n    deleteConfig,\n    favoriteConfig,\n    isLoading,\n    error,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}