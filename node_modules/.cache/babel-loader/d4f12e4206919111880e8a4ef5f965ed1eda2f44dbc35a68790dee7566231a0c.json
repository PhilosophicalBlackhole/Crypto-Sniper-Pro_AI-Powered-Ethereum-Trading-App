{"ast":null,"code":"/**\n * Custom hook for trading and sniping functionality\n */import{useState,useCallback,useEffect}from'react';import{useTestnet}from'./useTestnet';import{transactionStorage}from'../services/transactionStorage';export function useTrading(userId){const{isTestnet,web3Service}=useTestnet();const[snipeConfigs,setSnipeConfigs]=useState([]);const[transactions,setTransactions]=useState([]);// Add some demo data for better UX\nconst addDemoData=useCallback(()=>{const demoConfig={id:'demo-1',tokenAddress:'0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',targetPrice:0.00234,maxPrice:0.00250,amount:0.5,slippage:12,gasPrice:25,maxGas:500000,enabled:true,gasSettings:{mode:'auto',maxGasPrice:100,priorityFee:2,executionTimeout:120,retryCount:3},slippageSettings:{mode:'adaptive',baseSlippage:12,maxSlippage:25,liquidityThreshold:100000,volatilityMultiplier:1.5},autoSell:{enabled:true,profitTarget:50,stopLoss:-15,trailingStop:{enabled:true,percentage:5,activationPrice:25},partialSelling:{enabled:true,percentages:[25,50],priceTargets:[30,60]}},batchSettings:{enabled:true,maxBatchSize:3,batchDelay:200,nonceManagement:'auto',priority:7}};setSnipeConfigs([demoConfig]);// Add some demo transactions\nconst demoTransactions=[{id:'demo-tx-1',hash:'0x1234567890abcdef1234567890abcdef12345678',type:'buy',tokenAddress:'0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',tokenSymbol:'UNI',amount:0.5,price:0.00234,gasUsed:180000,gasPrice:25,timestamp:Date.now()-300000,status:'success',profit:0.0123},{id:'demo-tx-2',hash:'0xabcdef1234567890abcdef1234567890abcdef12',type:'buy',tokenAddress:'0xa0b86a33e6776d6e94c13c6e2c2c72b6b5b7e6d3',tokenSymbol:'PEPE',amount:0.2,price:0.00001234,gasUsed:165000,gasPrice:22,timestamp:Date.now()-600000,status:'success',profit:-0.0045}];setTransactions(demoTransactions);},[]);const[marketData,setMarketData]=useState(new Map());const[botStatus,setBotStatus]=useState({isRunning:false,activeSnipes:0,totalTransactions:0,totalProfit:0,successRate:0,uptime:0});const addSnipeConfig=useCallback(config=>{const newConfig={...config,id:Date.now().toString()};setSnipeConfigs(prev=>[...prev,newConfig]);},[]);const updateSnipeConfig=useCallback((id,updates)=>{setSnipeConfigs(prev=>prev.map(config=>config.id===id?{...config,...updates}:config));},[]);const removeSnipeConfig=useCallback(id=>{setSnipeConfigs(prev=>prev.filter(config=>config.id!==id));},[]);// Load dashboard transactions on mount\nuseEffect(()=>{if(userId){const dashboardTransactions=transactionStorage.getDashboardTransactions(userId);setTransactions(dashboardTransactions);// Cleanup old transactions periodically\ntransactionStorage.cleanupOldTransactions(userId);}},[userId]);const simulateTransaction=useCallback(async(type,tokenAddress,amount,price)=>{// Simulate transaction execution\nconst transaction={id:Date.now().toString(),hash:`0x${Math.random().toString(16).slice(2)}`,type,tokenAddress,tokenSymbol:'TOKEN',amount,price,gasUsed:Math.floor(Math.random()*100000)+21000,gasPrice:Math.floor(Math.random()*50)+20,timestamp:Date.now(),status:'pending',profit:type==='sell'?(Math.random()-0.3)*amount:undefined};// Add to local state immediately\nsetTransactions(prev=>[transaction,...prev.slice(0,9)]);// Keep only 10 in local state\n// Save to persistent storage if user is logged in\nif(userId){transactionStorage.saveTransaction(userId,transaction);}// Simulate transaction confirmation\nsetTimeout(()=>{const success=Math.random()>0.1;// 90% success rate\nconst confirmedTransaction={...transaction,status:success?'success':'failed',profit:success&&type==='buy'?(Math.random()-0.3)*amount*price:transaction.profit};// Update local state\nsetTransactions(prev=>prev.map(tx=>tx.id===transaction.id?confirmedTransaction:tx));// Update persistent storage\nif(userId){transactionStorage.saveTransaction(userId,confirmedTransaction);}},2000+Math.random()*3000);return transaction;},[userId]);const startBot=useCallback(()=>{setBotStatus(prev=>({...prev,isRunning:true}));},[]);const stopBot=useCallback(()=>{setBotStatus(prev=>({...prev,isRunning:false}));},[]);// Simulate market data updates\nuseEffect(()=>{const interval=setInterval(()=>{snipeConfigs.forEach(config=>{const currentData=marketData.get(config.tokenAddress);const basePrice=(currentData===null||currentData===void 0?void 0:currentData.price)||Math.random()*0.001+0.0001;const priceChange=(Math.random()-0.5)*0.1;const newData={tokenAddress:config.tokenAddress,price:basePrice*(1+priceChange),priceChange1m:(Math.random()-0.5)*5,priceChange5m:(Math.random()-0.5)*15,priceChange1h:(Math.random()-0.5)*30,volume1h:Math.random()*1000000,liquidity:Math.random()*5000000,holders:Math.floor(Math.random()*10000)+100,timestamp:Date.now()};setMarketData(prev=>new Map(prev.set(config.tokenAddress,newData)));// Check for snipe opportunities\nif(config.enabled&&botStatus.isRunning&&newData.price<=config.targetPrice){simulateTransaction('buy',config.tokenAddress,config.amount,newData.price);}});},1000);return()=>clearInterval(interval);},[snipeConfigs,marketData,botStatus.isRunning,simulateTransaction]);// Update bot status\nuseEffect(()=>{const activeSnipes=snipeConfigs.filter(config=>config.enabled).length;const successfulTxs=transactions.filter(tx=>tx.status==='success').length;const totalTxs=transactions.filter(tx=>tx.status!=='pending').length;const totalProfit=transactions.filter(tx=>tx.status==='success'&&tx.profit).reduce((sum,tx)=>sum+(tx.profit||0),0);setBotStatus(prev=>({...prev,activeSnipes,totalTransactions:totalTxs,totalProfit,successRate:totalTxs>0?successfulTxs/totalTxs*100:0}));},[snipeConfigs,transactions]);return{snipeConfigs,transactions,marketData,botStatus,addSnipeConfig,updateSnipeConfig,removeSnipeConfig,simulateTransaction,startBot,stopBot,addDemoData};}","map":{"version":3,"names":["useState","useCallback","useEffect","useTestnet","transactionStorage","useTrading","userId","isTestnet","web3Service","snipeConfigs","setSnipeConfigs","transactions","setTransactions","addDemoData","demoConfig","id","tokenAddress","targetPrice","maxPrice","amount","slippage","gasPrice","maxGas","enabled","gasSettings","mode","maxGasPrice","priorityFee","executionTimeout","retryCount","slippageSettings","baseSlippage","maxSlippage","liquidityThreshold","volatilityMultiplier","autoSell","profitTarget","stopLoss","trailingStop","percentage","activationPrice","partialSelling","percentages","priceTargets","batchSettings","maxBatchSize","batchDelay","nonceManagement","priority","demoTransactions","hash","type","tokenSymbol","price","gasUsed","timestamp","Date","now","status","profit","marketData","setMarketData","Map","botStatus","setBotStatus","isRunning","activeSnipes","totalTransactions","totalProfit","successRate","uptime","addSnipeConfig","config","newConfig","toString","prev","updateSnipeConfig","updates","map","removeSnipeConfig","filter","dashboardTransactions","getDashboardTransactions","cleanupOldTransactions","simulateTransaction","transaction","Math","random","slice","floor","undefined","saveTransaction","setTimeout","success","confirmedTransaction","tx","startBot","stopBot","interval","setInterval","forEach","currentData","get","basePrice","priceChange","newData","priceChange1m","priceChange5m","priceChange1h","volume1h","liquidity","holders","set","clearInterval","length","successfulTxs","totalTxs","reduce","sum"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useTrading.ts"],"sourcesContent":["/**\n * Custom hook for trading and sniping functionality\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { SnipeConfig, Transaction, MarketData, BotStatus } from '../types/trading';\nimport { useTestnet } from './useTestnet';\nimport { transactionStorage } from '../services/transactionStorage';\n\nexport function useTrading(userId?: string) {\n  const { isTestnet, web3Service } = useTestnet();\n  const [snipeConfigs, setSnipeConfigs] = useState<SnipeConfig[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  \n  // Add some demo data for better UX\n  const addDemoData = useCallback(() => {\n    const demoConfig: SnipeConfig = {\n      id: 'demo-1',\n      tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n      targetPrice: 0.00234,\n      maxPrice: 0.00250,\n      amount: 0.5,\n      slippage: 12,\n      gasPrice: 25,\n      maxGas: 500000,\n      enabled: true,\n      gasSettings: {\n        mode: 'auto',\n        maxGasPrice: 100,\n        priorityFee: 2,\n        executionTimeout: 120,\n        retryCount: 3,\n      },\n      slippageSettings: {\n        mode: 'adaptive',\n        baseSlippage: 12,\n        maxSlippage: 25,\n        liquidityThreshold: 100000,\n        volatilityMultiplier: 1.5,\n      },\n      autoSell: {\n        enabled: true,\n        profitTarget: 50,\n        stopLoss: -15,\n        trailingStop: {\n          enabled: true,\n          percentage: 5,\n          activationPrice: 25,\n        },\n        partialSelling: {\n          enabled: true,\n          percentages: [25, 50],\n          priceTargets: [30, 60],\n        },\n      },\n      batchSettings: {\n        enabled: true,\n        maxBatchSize: 3,\n        batchDelay: 200,\n        nonceManagement: 'auto',\n        priority: 7,\n      },\n    };\n    \n    setSnipeConfigs([demoConfig]);\n    \n    // Add some demo transactions\n    const demoTransactions: Transaction[] = [\n      {\n        id: 'demo-tx-1',\n        hash: '0x1234567890abcdef1234567890abcdef12345678',\n        type: 'buy',\n        tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n        tokenSymbol: 'UNI',\n        amount: 0.5,\n        price: 0.00234,\n        gasUsed: 180000,\n        gasPrice: 25,\n        timestamp: Date.now() - 300000,\n        status: 'success',\n        profit: 0.0123,\n      },\n      {\n        id: 'demo-tx-2',\n        hash: '0xabcdef1234567890abcdef1234567890abcdef12',\n        type: 'buy',\n        tokenAddress: '0xa0b86a33e6776d6e94c13c6e2c2c72b6b5b7e6d3',\n        tokenSymbol: 'PEPE',\n        amount: 0.2,\n        price: 0.00001234,\n        gasUsed: 165000,\n        gasPrice: 22,\n        timestamp: Date.now() - 600000,\n        status: 'success',\n        profit: -0.0045,\n      },\n    ];\n    \n    setTransactions(demoTransactions);\n  }, []);\n  const [marketData, setMarketData] = useState<Map<string, MarketData>>(new Map());\n  const [botStatus, setBotStatus] = useState<BotStatus>({\n    isRunning: false,\n    activeSnipes: 0,\n    totalTransactions: 0,\n    totalProfit: 0,\n    successRate: 0,\n    uptime: 0,\n  });\n\n  const addSnipeConfig = useCallback((config: Omit<SnipeConfig, 'id'>) => {\n    const newConfig: SnipeConfig = {\n      ...config,\n      id: Date.now().toString(),\n    };\n    setSnipeConfigs(prev => [...prev, newConfig]);\n  }, []);\n\n  const updateSnipeConfig = useCallback((id: string, updates: Partial<SnipeConfig>) => {\n    setSnipeConfigs(prev => \n      prev.map(config => \n        config.id === id ? { ...config, ...updates } : config\n      )\n    );\n  }, []);\n\n  const removeSnipeConfig = useCallback((id: string) => {\n    setSnipeConfigs(prev => prev.filter(config => config.id !== id));\n  }, []);\n\n  // Load dashboard transactions on mount\n  useEffect(() => {\n    if (userId) {\n      const dashboardTransactions = transactionStorage.getDashboardTransactions(userId);\n      setTransactions(dashboardTransactions);\n      \n      // Cleanup old transactions periodically\n      transactionStorage.cleanupOldTransactions(userId);\n    }\n  }, [userId]);\n\n  const simulateTransaction = useCallback(async (\n    type: 'buy' | 'sell',\n    tokenAddress: string,\n    amount: number,\n    price: number\n  ): Promise<Transaction> => {\n    // Simulate transaction execution\n    const transaction: Transaction = {\n      id: Date.now().toString(),\n      hash: `0x${Math.random().toString(16).slice(2)}`,\n      type,\n      tokenAddress,\n      tokenSymbol: 'TOKEN',\n      amount,\n      price,\n      gasUsed: Math.floor(Math.random() * 100000) + 21000,\n      gasPrice: Math.floor(Math.random() * 50) + 20,\n      timestamp: Date.now(),\n      status: 'pending',\n      profit: type === 'sell' ? (Math.random() - 0.3) * amount : undefined\n    };\n\n    // Add to local state immediately\n    setTransactions(prev => [transaction, ...prev.slice(0, 9)]); // Keep only 10 in local state\n    \n    // Save to persistent storage if user is logged in\n    if (userId) {\n      transactionStorage.saveTransaction(userId, transaction);\n    }\n\n    // Simulate transaction confirmation\n    setTimeout(() => {\n      const success = Math.random() > 0.1; // 90% success rate\n      const confirmedTransaction = { \n        ...transaction, \n        status: success ? 'success' as const : 'failed' as const,\n        profit: success && type === 'buy' ? (Math.random() - 0.3) * amount * price : transaction.profit\n      };\n      \n      // Update local state\n      setTransactions(prev => \n        prev.map(tx => \n          tx.id === transaction.id ? confirmedTransaction : tx\n        )\n      );\n      \n      // Update persistent storage\n      if (userId) {\n        transactionStorage.saveTransaction(userId, confirmedTransaction);\n      }\n    }, 2000 + Math.random() * 3000);\n\n    return transaction;\n  }, [userId]);\n\n  const startBot = useCallback(() => {\n    setBotStatus(prev => ({ ...prev, isRunning: true }));\n  }, []);\n\n  const stopBot = useCallback(() => {\n    setBotStatus(prev => ({ ...prev, isRunning: false }));\n  }, []);\n\n  // Simulate market data updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      snipeConfigs.forEach(config => {\n        const currentData = marketData.get(config.tokenAddress);\n        const basePrice = currentData?.price || Math.random() * 0.001 + 0.0001;\n        const priceChange = (Math.random() - 0.5) * 0.1;\n        \n        const newData: MarketData = {\n          tokenAddress: config.tokenAddress,\n          price: basePrice * (1 + priceChange),\n          priceChange1m: (Math.random() - 0.5) * 5,\n          priceChange5m: (Math.random() - 0.5) * 15,\n          priceChange1h: (Math.random() - 0.5) * 30,\n          volume1h: Math.random() * 1000000,\n          liquidity: Math.random() * 5000000,\n          holders: Math.floor(Math.random() * 10000) + 100,\n          timestamp: Date.now(),\n        };\n\n        setMarketData(prev => new Map(prev.set(config.tokenAddress, newData)));\n\n        // Check for snipe opportunities\n        if (config.enabled && botStatus.isRunning && newData.price <= config.targetPrice) {\n          simulateTransaction('buy', config.tokenAddress, config.amount, newData.price);\n        }\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [snipeConfigs, marketData, botStatus.isRunning, simulateTransaction]);\n\n  // Update bot status\n  useEffect(() => {\n    const activeSnipes = snipeConfigs.filter(config => config.enabled).length;\n    const successfulTxs = transactions.filter(tx => tx.status === 'success').length;\n    const totalTxs = transactions.filter(tx => tx.status !== 'pending').length;\n    const totalProfit = transactions\n      .filter(tx => tx.status === 'success' && tx.profit)\n      .reduce((sum, tx) => sum + (tx.profit || 0), 0);\n\n    setBotStatus(prev => ({\n      ...prev,\n      activeSnipes,\n      totalTransactions: totalTxs,\n      totalProfit,\n      successRate: totalTxs > 0 ? (successfulTxs / totalTxs) * 100 : 0,\n    }));\n  }, [snipeConfigs, transactions]);\n\n  return {\n    snipeConfigs,\n    transactions,\n    marketData,\n    botStatus,\n    addSnipeConfig,\n    updateSnipeConfig,\n    removeSnipeConfig,\n    simulateTransaction,\n    startBot,\n    stopBot,\n    addDemoData,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}