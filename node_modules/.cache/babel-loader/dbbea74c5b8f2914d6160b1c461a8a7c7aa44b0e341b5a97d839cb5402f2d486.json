{"ast":null,"code":"/**\n * Multi-wallet connection hook supporting MetaMask, Coinbase Wallet, and other providers\n */import{useState,useEffect,useCallback}from'react';export function useMultiWallet(){const[walletState,setWalletState]=useState({connectedWallet:null,address:null,balance:'0',chainId:null,isConnecting:false,error:null,availableWallets:[]});const[demoMode,setDemoMode]=useState(false);const detectWallets=useCallback(()=>{const wallets=[];// MetaMask\nif(window.ethereum&&window.ethereum.isMetaMask){wallets.push({id:'metamask',name:'MetaMask',icon:'ðŸ¦Š',isInstalled:true,isConnected:false,provider:window.ethereum});}// Coinbase Wallet\nif(window.ethereum&&window.ethereum.isCoinbaseWallet){wallets.push({id:'coinbase',name:'Coinbase Wallet',icon:'ðŸŸ¦',isInstalled:true,isConnected:false,provider:window.ethereum});}// WalletConnect (if available)\nif(window.ethereum&&window.ethereum.isWalletConnect){wallets.push({id:'walletconnect',name:'WalletConnect',icon:'ðŸ”—',isInstalled:true,isConnected:false,provider:window.ethereum});}// Generic ethereum provider (fallback)\nif(window.ethereum&&wallets.length===0){wallets.push({id:'ethereum',name:'Web3 Wallet',icon:'âš¡',isInstalled:true,isConnected:false,provider:window.ethereum});}// Demo wallet (always available)\nwallets.push({id:'demo',name:'Demo Mode',icon:'ðŸŽ­',isInstalled:true,isConnected:false,provider:null});return wallets;},[]);const updateBalance=useCallback(async(address,provider)=>{try{if(provider){const balance=await provider.request({method:'eth_getBalance',params:[address,'latest']});const balanceInEth=(parseInt(balance,16)/1e18).toFixed(4);setWalletState(prev=>({...prev,balance:balanceInEth}));}}catch(error){console.error('Error fetching balance:',error);}},[]);const connectDemoWallet=useCallback(()=>{setWalletState(prev=>({...prev,isConnecting:true,error:null}));setTimeout(()=>{setWalletState(prev=>({...prev,connectedWallet:'demo',address:'0x742d35Cc6634C0532925a3b8D398aF7f',balance:'2.4567',chainId:1,isConnecting:false,error:null,availableWallets:prev.availableWallets.map(w=>w.id==='demo'?{...w,isConnected:true}:{...w,isConnected:false})}));setDemoMode(true);},1000);},[]);const connectWallet=useCallback(async walletId=>{const wallet=walletState.availableWallets.find(w=>w.id===walletId);if(!wallet)return;if(walletId==='demo'){connectDemoWallet();return;}if(!wallet.provider){setWalletState(prev=>({...prev,error:`${wallet.name} is not installed or available.`}));return;}setWalletState(prev=>({...prev,isConnecting:true,error:null}));try{// For multiple providers, we might need to select the specific one\nlet provider=wallet.provider;// If there are multiple providers, try to select the right one\nif(window.ethereum&&window.ethereum.providers){const providers=window.ethereum.providers;if(walletId==='metamask'){provider=providers.find(p=>p.isMetaMask)||provider;}else if(walletId==='coinbase'){provider=providers.find(p=>p.isCoinbaseWallet)||provider;}}const accounts=await provider.request({method:'eth_requestAccounts'});const chainId=await provider.request({method:'eth_chainId'});if(accounts.length>0){const address=accounts[0];setWalletState(prev=>({...prev,connectedWallet:walletId,address,chainId:parseInt(chainId,16),isConnecting:false,availableWallets:prev.availableWallets.map(w=>w.id===walletId?{...w,isConnected:true}:{...w,isConnected:false})}));await updateBalance(address,provider);setDemoMode(false);}}catch(error){setWalletState(prev=>({...prev,isConnecting:false,error:error.message||`Failed to connect ${wallet.name}`}));}},[walletState.availableWallets,updateBalance,connectDemoWallet]);const disconnectWallet=useCallback(()=>{setWalletState(prev=>({...prev,connectedWallet:null,address:null,balance:'0',chainId:null,isConnecting:false,error:null,availableWallets:prev.availableWallets.map(w=>({...w,isConnected:false}))}));setDemoMode(false);},[]);const switchWallet=useCallback(async newWalletId=>{if(walletState.connectedWallet===newWalletId)return;// Disconnect current wallet first\ndisconnectWallet();// Small delay to ensure clean disconnection\nsetTimeout(()=>{connectWallet(newWalletId);},500);},[walletState.connectedWallet,disconnectWallet,connectWallet]);// Initialize available wallets on mount\nuseEffect(()=>{const wallets=detectWallets();setWalletState(prev=>({...prev,availableWallets:wallets}));},[detectWallets]);// Listen for account changes\nuseEffect(()=>{if(window.ethereum&&walletState.connectedWallet&&walletState.connectedWallet!=='demo'){const handleAccountsChanged=accounts=>{if(accounts.length===0){disconnectWallet();}else{setWalletState(prev=>({...prev,address:accounts[0]}));const wallet=walletState.availableWallets.find(w=>w.id===walletState.connectedWallet);if(wallet!==null&&wallet!==void 0&&wallet.provider){updateBalance(accounts[0],wallet.provider);}}};const handleChainChanged=chainId=>{setWalletState(prev=>({...prev,chainId:parseInt(chainId,16)}));};window.ethereum.on('accountsChanged',handleAccountsChanged);window.ethereum.on('chainChanged',handleChainChanged);return()=>{window.ethereum.removeListener('accountsChanged',handleAccountsChanged);window.ethereum.removeListener('chainChanged',handleChainChanged);};}},[walletState.connectedWallet,walletState.availableWallets,disconnectWallet,updateBalance]);return{...walletState,isConnected:!!walletState.connectedWallet,connectWallet,disconnectWallet,switchWallet,updateBalance:()=>{if(walletState.address&&walletState.connectedWallet!=='demo'){const wallet=walletState.availableWallets.find(w=>w.id===walletState.connectedWallet);if(wallet!==null&&wallet!==void 0&&wallet.provider){updateBalance(walletState.address,wallet.provider);}}},demoMode};}","map":{"version":3,"names":["useState","useEffect","useCallback","useMultiWallet","walletState","setWalletState","connectedWallet","address","balance","chainId","isConnecting","error","availableWallets","demoMode","setDemoMode","detectWallets","wallets","window","ethereum","isMetaMask","push","id","name","icon","isInstalled","isConnected","provider","isCoinbaseWallet","isWalletConnect","length","updateBalance","request","method","params","balanceInEth","parseInt","toFixed","prev","console","connectDemoWallet","setTimeout","map","w","connectWallet","walletId","wallet","find","providers","p","accounts","message","disconnectWallet","switchWallet","newWalletId","handleAccountsChanged","handleChainChanged","on","removeListener"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useMultiWallet.ts"],"sourcesContent":["/**\n * Multi-wallet connection hook supporting MetaMask, Coinbase Wallet, and other providers\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\nexport interface WalletProvider {\n  id: string;\n  name: string;\n  icon: string;\n  isInstalled: boolean;\n  isConnected: boolean;\n  provider?: any;\n}\n\nexport interface MultiWalletState {\n  connectedWallet: string | null;\n  address: string | null;\n  balance: string;\n  chainId: number | null;\n  isConnecting: boolean;\n  error: string | null;\n  availableWallets: WalletProvider[];\n}\n\nexport function useMultiWallet() {\n  const [walletState, setWalletState] = useState<MultiWalletState>({\n    connectedWallet: null,\n    address: null,\n    balance: '0',\n    chainId: null,\n    isConnecting: false,\n    error: null,\n    availableWallets: [],\n  });\n\n  const [demoMode, setDemoMode] = useState(false);\n\n  const detectWallets = useCallback((): WalletProvider[] => {\n    const wallets: WalletProvider[] = [];\n\n    // MetaMask\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      wallets.push({\n        id: 'metamask',\n        name: 'MetaMask',\n        icon: 'ðŸ¦Š',\n        isInstalled: true,\n        isConnected: false,\n        provider: window.ethereum,\n      });\n    }\n\n    // Coinbase Wallet\n    if (window.ethereum && window.ethereum.isCoinbaseWallet) {\n      wallets.push({\n        id: 'coinbase',\n        name: 'Coinbase Wallet',\n        icon: 'ðŸŸ¦',\n        isInstalled: true,\n        isConnected: false,\n        provider: window.ethereum,\n      });\n    }\n\n    // WalletConnect (if available)\n    if (window.ethereum && window.ethereum.isWalletConnect) {\n      wallets.push({\n        id: 'walletconnect',\n        name: 'WalletConnect',\n        icon: 'ðŸ”—',\n        isInstalled: true,\n        isConnected: false,\n        provider: window.ethereum,\n      });\n    }\n\n    // Generic ethereum provider (fallback)\n    if (window.ethereum && wallets.length === 0) {\n      wallets.push({\n        id: 'ethereum',\n        name: 'Web3 Wallet',\n        icon: 'âš¡',\n        isInstalled: true,\n        isConnected: false,\n        provider: window.ethereum,\n      });\n    }\n\n    // Demo wallet (always available)\n    wallets.push({\n      id: 'demo',\n      name: 'Demo Mode',\n      icon: 'ðŸŽ­',\n      isInstalled: true,\n      isConnected: false,\n      provider: null,\n    });\n\n    return wallets;\n  }, []);\n\n  const updateBalance = useCallback(async (address: string, provider: any) => {\n    try {\n      if (provider) {\n        const balance = await provider.request({\n          method: 'eth_getBalance',\n          params: [address, 'latest'],\n        });\n        const balanceInEth = (parseInt(balance, 16) / 1e18).toFixed(4);\n        setWalletState(prev => ({ ...prev, balance: balanceInEth }));\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  }, []);\n\n  const connectDemoWallet = useCallback(() => {\n    setWalletState(prev => ({ ...prev, isConnecting: true, error: null }));\n    \n    setTimeout(() => {\n      setWalletState(prev => ({\n        ...prev,\n        connectedWallet: 'demo',\n        address: '0x742d35Cc6634C0532925a3b8D398aF7f',\n        balance: '2.4567',\n        chainId: 1,\n        isConnecting: false,\n        error: null,\n        availableWallets: prev.availableWallets.map(w => \n          w.id === 'demo' ? { ...w, isConnected: true } : { ...w, isConnected: false }\n        ),\n      }));\n      setDemoMode(true);\n    }, 1000);\n  }, []);\n\n  const connectWallet = useCallback(async (walletId: string) => {\n    const wallet = walletState.availableWallets.find(w => w.id === walletId);\n    if (!wallet) return;\n\n    if (walletId === 'demo') {\n      connectDemoWallet();\n      return;\n    }\n\n    if (!wallet.provider) {\n      setWalletState(prev => ({\n        ...prev,\n        error: `${wallet.name} is not installed or available.`,\n      }));\n      return;\n    }\n\n    setWalletState(prev => ({ ...prev, isConnecting: true, error: null }));\n\n    try {\n      // For multiple providers, we might need to select the specific one\n      let provider = wallet.provider;\n      \n      // If there are multiple providers, try to select the right one\n      if (window.ethereum && window.ethereum.providers) {\n        const providers = window.ethereum.providers;\n        if (walletId === 'metamask') {\n          provider = providers.find((p: any) => p.isMetaMask) || provider;\n        } else if (walletId === 'coinbase') {\n          provider = providers.find((p: any) => p.isCoinbaseWallet) || provider;\n        }\n      }\n\n      const accounts = await provider.request({\n        method: 'eth_requestAccounts',\n      });\n\n      const chainId = await provider.request({\n        method: 'eth_chainId',\n      });\n\n      if (accounts.length > 0) {\n        const address = accounts[0];\n        setWalletState(prev => ({\n          ...prev,\n          connectedWallet: walletId,\n          address,\n          chainId: parseInt(chainId, 16),\n          isConnecting: false,\n          availableWallets: prev.availableWallets.map(w => \n            w.id === walletId ? { ...w, isConnected: true } : { ...w, isConnected: false }\n          ),\n        }));\n        await updateBalance(address, provider);\n        setDemoMode(false);\n      }\n    } catch (error: any) {\n      setWalletState(prev => ({\n        ...prev,\n        isConnecting: false,\n        error: error.message || `Failed to connect ${wallet.name}`,\n      }));\n    }\n  }, [walletState.availableWallets, updateBalance, connectDemoWallet]);\n\n  const disconnectWallet = useCallback(() => {\n    setWalletState(prev => ({\n      ...prev,\n      connectedWallet: null,\n      address: null,\n      balance: '0',\n      chainId: null,\n      isConnecting: false,\n      error: null,\n      availableWallets: prev.availableWallets.map(w => ({ ...w, isConnected: false })),\n    }));\n    setDemoMode(false);\n  }, []);\n\n  const switchWallet = useCallback(async (newWalletId: string) => {\n    if (walletState.connectedWallet === newWalletId) return;\n    \n    // Disconnect current wallet first\n    disconnectWallet();\n    \n    // Small delay to ensure clean disconnection\n    setTimeout(() => {\n      connectWallet(newWalletId);\n    }, 500);\n  }, [walletState.connectedWallet, disconnectWallet, connectWallet]);\n\n  // Initialize available wallets on mount\n  useEffect(() => {\n    const wallets = detectWallets();\n    setWalletState(prev => ({ ...prev, availableWallets: wallets }));\n  }, [detectWallets]);\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum && walletState.connectedWallet && walletState.connectedWallet !== 'demo') {\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          setWalletState(prev => ({ ...prev, address: accounts[0] }));\n          const wallet = walletState.availableWallets.find(w => w.id === walletState.connectedWallet);\n          if (wallet?.provider) {\n            updateBalance(accounts[0], wallet.provider);\n          }\n        }\n      };\n\n      const handleChainChanged = (chainId: string) => {\n        setWalletState(prev => ({ \n          ...prev, \n          chainId: parseInt(chainId, 16) \n        }));\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [walletState.connectedWallet, walletState.availableWallets, disconnectWallet, updateBalance]);\n\n  return {\n    ...walletState,\n    isConnected: !!walletState.connectedWallet,\n    connectWallet,\n    disconnectWallet,\n    switchWallet,\n    updateBalance: () => {\n      if (walletState.address && walletState.connectedWallet !== 'demo') {\n        const wallet = walletState.availableWallets.find(w => w.id === walletState.connectedWallet);\n        if (wallet?.provider) {\n          updateBalance(walletState.address, wallet.provider);\n        }\n      }\n    },\n    demoMode,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}