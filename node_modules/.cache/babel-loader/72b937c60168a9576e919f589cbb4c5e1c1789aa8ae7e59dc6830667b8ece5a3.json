{"ast":null,"code":"/**\n * Payment service for handling subscriptions and payments\n */class PaymentService{constructor(){this.config=void 0;this.initialized=false;// Browser-safe environment variable access with fallbacks\nthis.config={stripePublishableKey:this.getEnvVar('REACT_APP_STRIPE_PUBLISHABLE_KEY')||'pk_test_demo_stripe_key',coinbaseApiKey:this.getEnvVar('REACT_APP_COINBASE_API_KEY'),paypalClientId:this.getEnvVar('REACT_APP_PAYPAL_CLIENT_ID'),creatorWalletAddress:this.getEnvVar('REACT_APP_CREATOR_WALLET')||'0x742d35Cc6634C0532925a3b8D6Cd9b3F4c1a7f8D',// Your actual wallet\nwebhookSecret:this.getEnvVar('REACT_APP_WEBHOOK_SECRET')||'whsec_test_demo_secret'};}/**\n   * Safe environment variable access for browser\n   */getEnvVar(key){try{// Check if we're in browser environment\nif(typeof window!=='undefined'){var _ENV__;// For browser environment, try to access from window object or fallback\nreturn((_ENV__=window.__ENV__)===null||_ENV__===void 0?void 0:_ENV__[key])||undefined;}// For server-side rendering (shouldn't happen in this case)\nreturn undefined;}catch(error){console.warn(`Failed to access environment variable ${key}:`,error);return undefined;}}/**\n   * Initialize payment providers\n   */async initialize(){if(this.initialized)return;try{// Initialize Stripe\nif(this.config.stripePublishableKey&&window.Stripe){const stripe=window.Stripe(this.config.stripePublishableKey);window.stripeInstance=stripe;}// Initialize other payment providers as needed\n// PayPal, Coinbase Commerce, etc.\nthis.initialized=true;}catch(error){console.error('Failed to initialize payment service:',error);}}/**\n   * Create payment intent for subscription\n   */async createPaymentIntent(amount,currency,planId,userId){try{// In production, this would call your backend API\nconst response=await fetch('/api/payment/create-intent',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({amount,currency,planId,userId,creatorWallet:this.config.creatorWalletAddress})});if(!response.ok){throw new Error('Failed to create payment intent');}return await response.json();}catch(error){console.error('Error creating payment intent:',error);// Fallback for demo - simulate payment intent\nreturn{id:`pi_demo_${Date.now()}`,amount:amount*100,// Convert to cents\ncurrency:currency.toLowerCase(),status:'requires_payment_method',metadata:{planId,userId,creatorWallet:this.config.creatorWalletAddress}};}}/**\n   * Process payment with Stripe\n   */async processStripePayment(paymentIntentId,paymentMethod){try{const stripe=window.stripeInstance;if(!stripe)throw new Error('Stripe not initialized');const{error}=await stripe.confirmCardPayment(paymentIntentId,{payment_method:{card:paymentMethod,billing_details:{// Add billing details\n}}});if(error){console.error('Stripe payment error:',error);return false;}return true;}catch(error){console.error('Error processing Stripe payment:',error);return false;}}/**\n   * Process crypto payment\n   */async processCryptoPayment(amount,currency,userWallet){try{// For ETH payments\nif(currency==='ETH'&&window.ethereum){const accounts=await window.ethereum.request({method:'eth_requestAccounts'});const transactionParameters={to:this.config.creatorWalletAddress,from:accounts[0],value:(amount*Math.pow(10,18)).toString(16),// Convert ETH to wei\ngasPrice:'0x5208',// 21000 gwei\ngas:'0x5208'// 21000 gas limit\n};const txHash=await window.ethereum.request({method:'eth_sendTransaction',params:[transactionParameters]});return txHash;}return null;}catch(error){console.error('Error processing crypto payment:',error);return null;}}/**\n   * Verify payment webhook\n   */async verifyWebhook(payload,signature){try{// Verify webhook signature\n// This would use Stripe's webhook verification in production\nreturn true;}catch(error){console.error('Error verifying webhook:',error);return false;}}/**\n   * Handle successful payment\n   */async handleSuccessfulPayment(paymentIntentId,userId,planId){try{// Create or update subscription\nconst subscription={id:`sub_${Date.now()}`,userId,planId,status:'active',currentPeriodStart:Date.now(),currentPeriodEnd:Date.now()+30*24*60*60*1000,// 30 days\ncancelAtPeriodEnd:false,createdAt:Date.now(),updatedAt:Date.now()};// Store subscription\nlocalStorage.setItem(`cryptosniper_subscription_${userId}`,JSON.stringify(subscription));// Send confirmation email (in production)\n// await this.sendConfirmationEmail(userId, subscription);\n// Update creator earnings tracking\nawait this.trackCreatorEarnings(paymentIntentId,planId);return subscription;}catch(error){console.error('Error handling successful payment:',error);return null;}}/**\n   * Track creator earnings\n   */async trackCreatorEarnings(paymentIntentId,planId){try{const earnings={id:paymentIntentId,planId,amount:planId==='pro'?29:99,currency:'USD',timestamp:Date.now(),walletAddress:this.config.creatorWalletAddress};// Store earnings record\nconst existingEarnings=JSON.parse(localStorage.getItem('cryptosniper_creator_earnings')||'[]');existingEarnings.push(earnings);localStorage.setItem('cryptosniper_creator_earnings',JSON.stringify(existingEarnings));}catch(error){console.error('Error tracking creator earnings:',error);}}/**\n   * Get creator earnings summary\n   */async getCreatorEarnings(){try{const earnings=JSON.parse(localStorage.getItem('cryptosniper_creator_earnings')||'[]');const now=Date.now();const monthAgo=now-30*24*60*60*1000;const total=earnings.reduce((sum,earning)=>sum+earning.amount,0);const monthly=earnings.filter(earning=>earning.timestamp>monthAgo).reduce((sum,earning)=>sum+earning.amount,0);// Count active subscribers\nconst subscribers=Object.keys(localStorage).filter(key=>key.startsWith('cryptosniper_subscription_')).filter(key=>{const sub=JSON.parse(localStorage.getItem(key)||'{}');return sub.status==='active'&&sub.currentPeriodEnd>now;}).length;return{total,monthly,subscribers};}catch(error){console.error('Error getting creator earnings:',error);return{total:0,monthly:0,subscribers:0};}}}export const paymentService=new PaymentService();export default paymentService;","map":{"version":3,"names":["PaymentService","constructor","config","initialized","stripePublishableKey","getEnvVar","coinbaseApiKey","paypalClientId","creatorWalletAddress","webhookSecret","key","window","_ENV__","__ENV__","undefined","error","console","warn","initialize","Stripe","stripe","stripeInstance","createPaymentIntent","amount","currency","planId","userId","response","fetch","method","headers","body","JSON","stringify","creatorWallet","ok","Error","json","id","Date","now","toLowerCase","status","metadata","processStripePayment","paymentIntentId","paymentMethod","confirmCardPayment","payment_method","card","billing_details","processCryptoPayment","userWallet","ethereum","accounts","request","transactionParameters","to","from","value","Math","pow","toString","gasPrice","gas","txHash","params","verifyWebhook","payload","signature","handleSuccessfulPayment","subscription","currentPeriodStart","currentPeriodEnd","cancelAtPeriodEnd","createdAt","updatedAt","localStorage","setItem","trackCreatorEarnings","earnings","timestamp","walletAddress","existingEarnings","parse","getItem","push","getCreatorEarnings","monthAgo","total","reduce","sum","earning","monthly","filter","subscribers","Object","keys","startsWith","sub","length","paymentService"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/services/paymentService.ts"],"sourcesContent":["/**\n * Payment service for handling subscriptions and payments\n */\n\nimport { PaymentIntent, PaymentMethod, Subscription } from '../types/subscription';\n\nexport interface PaymentConfig {\n  stripePublishableKey: string;\n  coinbaseApiKey?: string;\n  paypalClientId?: string;\n  creatorWalletAddress: string; // Your wallet address for receiving payments\n  webhookSecret: string;\n}\n\nclass PaymentService {\n  private config: PaymentConfig;\n  private initialized = false;\n\n  constructor() {\n    // Browser-safe environment variable access with fallbacks\n    this.config = {\n      stripePublishableKey: this.getEnvVar('REACT_APP_STRIPE_PUBLISHABLE_KEY') || 'pk_test_demo_stripe_key',\n      coinbaseApiKey: this.getEnvVar('REACT_APP_COINBASE_API_KEY'),\n      paypalClientId: this.getEnvVar('REACT_APP_PAYPAL_CLIENT_ID'),\n      creatorWalletAddress: this.getEnvVar('REACT_APP_CREATOR_WALLET') || '0x742d35Cc6634C0532925a3b8D6Cd9b3F4c1a7f8D', // Your actual wallet\n      webhookSecret: this.getEnvVar('REACT_APP_WEBHOOK_SECRET') || 'whsec_test_demo_secret'\n    };\n  }\n\n  /**\n   * Safe environment variable access for browser\n   */\n  private getEnvVar(key: string): string | undefined {\n    try {\n      // Check if we're in browser environment\n      if (typeof window !== 'undefined') {\n        // For browser environment, try to access from window object or fallback\n        return (window as any).__ENV__?.[key] || undefined;\n      }\n      // For server-side rendering (shouldn't happen in this case)\n      return undefined;\n    } catch (error) {\n      console.warn(`Failed to access environment variable ${key}:`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Initialize payment providers\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Initialize Stripe\n      if (this.config.stripePublishableKey && window.Stripe) {\n        const stripe = window.Stripe(this.config.stripePublishableKey);\n        (window as any).stripeInstance = stripe;\n      }\n\n      // Initialize other payment providers as needed\n      // PayPal, Coinbase Commerce, etc.\n\n      this.initialized = true;\n    } catch (error) {\n      console.error('Failed to initialize payment service:', error);\n    }\n  }\n\n  /**\n   * Create payment intent for subscription\n   */\n  async createPaymentIntent(\n    amount: number,\n    currency: string,\n    planId: string,\n    userId: string\n  ): Promise<PaymentIntent | null> {\n    try {\n      // In production, this would call your backend API\n      const response = await fetch('/api/payment/create-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount,\n          currency,\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create payment intent');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating payment intent:', error);\n      \n      // Fallback for demo - simulate payment intent\n      return {\n        id: `pi_demo_${Date.now()}`,\n        amount: amount * 100, // Convert to cents\n        currency: currency.toLowerCase(),\n        status: 'requires_payment_method',\n        metadata: {\n          planId,\n          userId,\n          creatorWallet: this.config.creatorWalletAddress\n        }\n      };\n    }\n  }\n\n  /**\n   * Process payment with Stripe\n   */\n  async processStripePayment(\n    paymentIntentId: string,\n    paymentMethod: PaymentMethod\n  ): Promise<boolean> {\n    try {\n      const stripe = (window as any).stripeInstance;\n      if (!stripe) throw new Error('Stripe not initialized');\n\n      const { error } = await stripe.confirmCardPayment(paymentIntentId, {\n        payment_method: {\n          card: paymentMethod,\n          billing_details: {\n            // Add billing details\n          },\n        },\n      });\n\n      if (error) {\n        console.error('Stripe payment error:', error);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error processing Stripe payment:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process crypto payment\n   */\n  async processCryptoPayment(\n    amount: number,\n    currency: 'ETH' | 'BTC',\n    userWallet: string\n  ): Promise<string | null> {\n    try {\n      // For ETH payments\n      if (currency === 'ETH' && window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        const transactionParameters = {\n          to: this.config.creatorWalletAddress,\n          from: accounts[0],\n          value: (amount * Math.pow(10, 18)).toString(16), // Convert ETH to wei\n          gasPrice: '0x5208', // 21000 gwei\n          gas: '0x5208', // 21000 gas limit\n        };\n\n        const txHash = await window.ethereum.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters],\n        });\n\n        return txHash;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error processing crypto payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verify payment webhook\n   */\n  async verifyWebhook(payload: string, signature: string): Promise<boolean> {\n    try {\n      // Verify webhook signature\n      // This would use Stripe's webhook verification in production\n      return true;\n    } catch (error) {\n      console.error('Error verifying webhook:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Handle successful payment\n   */\n  async handleSuccessfulPayment(\n    paymentIntentId: string,\n    userId: string,\n    planId: string\n  ): Promise<Subscription | null> {\n    try {\n      // Create or update subscription\n      const subscription: Subscription = {\n        id: `sub_${Date.now()}`,\n        userId,\n        planId,\n        status: 'active',\n        currentPeriodStart: Date.now(),\n        currentPeriodEnd: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 days\n        cancelAtPeriodEnd: false,\n        createdAt: Date.now(),\n        updatedAt: Date.now()\n      };\n\n      // Store subscription\n      localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(subscription));\n\n      // Send confirmation email (in production)\n      // await this.sendConfirmationEmail(userId, subscription);\n\n      // Update creator earnings tracking\n      await this.trackCreatorEarnings(paymentIntentId, planId);\n\n      return subscription;\n    } catch (error) {\n      console.error('Error handling successful payment:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Track creator earnings\n   */\n  private async trackCreatorEarnings(paymentIntentId: string, planId: string): Promise<void> {\n    try {\n      const earnings = {\n        id: paymentIntentId,\n        planId,\n        amount: planId === 'pro' ? 29 : 99,\n        currency: 'USD',\n        timestamp: Date.now(),\n        walletAddress: this.config.creatorWalletAddress\n      };\n\n      // Store earnings record\n      const existingEarnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      existingEarnings.push(earnings);\n      localStorage.setItem('cryptosniper_creator_earnings', JSON.stringify(existingEarnings));\n\n    } catch (error) {\n      console.error('Error tracking creator earnings:', error);\n    }\n  }\n\n  /**\n   * Get creator earnings summary\n   */\n  async getCreatorEarnings(): Promise<{\n    total: number;\n    monthly: number;\n    subscribers: number;\n  }> {\n    try {\n      const earnings = JSON.parse(localStorage.getItem('cryptosniper_creator_earnings') || '[]');\n      const now = Date.now();\n      const monthAgo = now - (30 * 24 * 60 * 60 * 1000);\n\n      const total = earnings.reduce((sum: number, earning: any) => sum + earning.amount, 0);\n      const monthly = earnings\n        .filter((earning: any) => earning.timestamp > monthAgo)\n        .reduce((sum: number, earning: any) => sum + earning.amount, 0);\n      \n      // Count active subscribers\n      const subscribers = Object.keys(localStorage)\n        .filter(key => key.startsWith('cryptosniper_subscription_'))\n        .filter(key => {\n          const sub = JSON.parse(localStorage.getItem(key) || '{}');\n          return sub.status === 'active' && sub.currentPeriodEnd > now;\n        }).length;\n\n      return { total, monthly, subscribers };\n    } catch (error) {\n      console.error('Error getting creator earnings:', error);\n      return { total: 0, monthly: 0, subscribers: 0 };\n    }\n  }\n}\n\nexport const paymentService = new PaymentService();\nexport default paymentService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}