{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Custom hook for trading and sniping functionality\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useTestnet } from './useTestnet';\nimport { transactionStorage } from '../services/transactionStorage';\nexport function useTrading(userId) {\n  _s();\n  const {\n    isTestnet,\n    web3Service\n  } = useTestnet();\n  const [snipeConfigs, setSnipeConfigs] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n\n  // Add some demo data for better UX\n  const addDemoData = useCallback(() => {\n    const demoConfig = {\n      id: 'demo-1',\n      tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n      targetPrice: 0.00234,\n      maxPrice: 0.00250,\n      amount: 0.5,\n      slippage: 12,\n      gasPrice: 25,\n      maxGas: 500000,\n      enabled: true,\n      gasSettings: {\n        mode: 'auto',\n        maxGasPrice: 100,\n        priorityFee: 2,\n        executionTimeout: 120,\n        retryCount: 3\n      },\n      slippageSettings: {\n        mode: 'adaptive',\n        baseSlippage: 12,\n        maxSlippage: 25,\n        liquidityThreshold: 100000,\n        volatilityMultiplier: 1.5\n      },\n      autoSell: {\n        enabled: true,\n        profitTarget: 50,\n        stopLoss: -15,\n        trailingStop: {\n          enabled: true,\n          percentage: 5,\n          activationPrice: 25\n        },\n        partialSelling: {\n          enabled: true,\n          percentages: [25, 50],\n          priceTargets: [30, 60]\n        }\n      },\n      batchSettings: {\n        enabled: true,\n        maxBatchSize: 3,\n        batchDelay: 200,\n        nonceManagement: 'auto',\n        priority: 7\n      }\n    };\n    setSnipeConfigs([demoConfig]);\n\n    // Add some demo transactions\n    const demoTransactions = [{\n      id: 'demo-tx-1',\n      hash: '0x1234567890abcdef1234567890abcdef12345678',\n      type: 'buy',\n      tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n      tokenSymbol: 'UNI',\n      amount: 0.5,\n      price: 0.00234,\n      gasUsed: 180000,\n      gasPrice: 25,\n      timestamp: Date.now() - 300000,\n      status: 'success',\n      profit: 0.0123\n    }, {\n      id: 'demo-tx-2',\n      hash: '0xabcdef1234567890abcdef1234567890abcdef12',\n      type: 'buy',\n      tokenAddress: '0xa0b86a33e6776d6e94c13c6e2c2c72b6b5b7e6d3',\n      tokenSymbol: 'PEPE',\n      amount: 0.2,\n      price: 0.00001234,\n      gasUsed: 165000,\n      gasPrice: 22,\n      timestamp: Date.now() - 600000,\n      status: 'success',\n      profit: -0.0045\n    }];\n    setTransactions(demoTransactions);\n  }, []);\n  const [marketData, setMarketData] = useState(new Map());\n  const [botStatus, setBotStatus] = useState({\n    isRunning: false,\n    activeSnipes: 0,\n    totalTransactions: 0,\n    totalProfit: 0,\n    successRate: 0,\n    uptime: 0\n  });\n  const addSnipeConfig = useCallback(config => {\n    const newConfig = {\n      ...config,\n      id: Date.now().toString()\n    };\n    setSnipeConfigs(prev => [...prev, newConfig]);\n  }, []);\n  const updateSnipeConfig = useCallback((id, updates) => {\n    setSnipeConfigs(prev => prev.map(config => config.id === id ? {\n      ...config,\n      ...updates\n    } : config));\n  }, []);\n  const removeSnipeConfig = useCallback(id => {\n    setSnipeConfigs(prev => prev.filter(config => config.id !== id));\n  }, []);\n\n  // Load dashboard transactions on mount\n  useEffect(() => {\n    if (userId) {\n      const dashboardTransactions = transactionStorage.getDashboardTransactions(userId);\n      setTransactions(dashboardTransactions);\n\n      // Cleanup old transactions periodically\n      transactionStorage.cleanupOldTransactions(userId);\n    }\n  }, [userId]);\n  const simulateTransaction = useCallback(async (type, tokenAddress, amount, price) => {\n    // Simulate transaction execution\n    const transaction = {\n      id: Date.now().toString(),\n      hash: `0x${Math.random().toString(16).slice(2)}`,\n      type,\n      tokenAddress,\n      tokenSymbol: 'TOKEN',\n      amount,\n      price,\n      gasUsed: Math.floor(Math.random() * 100000) + 21000,\n      gasPrice: Math.floor(Math.random() * 50) + 20,\n      timestamp: Date.now(),\n      status: 'pending',\n      profit: type === 'sell' ? (Math.random() - 0.3) * amount : undefined\n    };\n\n    // Add to local state immediately\n    setTransactions(prev => [transaction, ...prev.slice(0, 9)]); // Keep only 10 in local state\n\n    // Save to persistent storage if user is logged in\n    if (userId) {\n      transactionStorage.saveTransaction(userId, transaction);\n    }\n\n    // Simulate transaction confirmation\n    setTimeout(() => {\n      const success = Math.random() > 0.1; // 90% success rate\n      const confirmedTransaction = {\n        ...transaction,\n        status: success ? 'success' : 'failed',\n        profit: success && type === 'buy' ? (Math.random() - 0.3) * amount * price : transaction.profit\n      };\n\n      // Update local state\n      setTransactions(prev => prev.map(tx => tx.id === transaction.id ? confirmedTransaction : tx));\n\n      // Update persistent storage\n      if (userId) {\n        transactionStorage.saveTransaction(userId, confirmedTransaction);\n      }\n    }, 2000 + Math.random() * 3000);\n    return transaction;\n  }, [userId]);\n  const startBot = useCallback(() => {\n    setBotStatus(prev => ({\n      ...prev,\n      isRunning: true\n    }));\n  }, []);\n  const stopBot = useCallback(() => {\n    setBotStatus(prev => ({\n      ...prev,\n      isRunning: false\n    }));\n  }, []);\n\n  // Simulate market data updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      snipeConfigs.forEach(config => {\n        const currentData = marketData.get(config.tokenAddress);\n        const basePrice = (currentData === null || currentData === void 0 ? void 0 : currentData.price) || Math.random() * 0.001 + 0.0001;\n        const priceChange = (Math.random() - 0.5) * 0.1;\n        const newData = {\n          tokenAddress: config.tokenAddress,\n          price: basePrice * (1 + priceChange),\n          priceChange1m: (Math.random() - 0.5) * 5,\n          priceChange5m: (Math.random() - 0.5) * 15,\n          priceChange1h: (Math.random() - 0.5) * 30,\n          volume1h: Math.random() * 1000000,\n          liquidity: Math.random() * 5000000,\n          holders: Math.floor(Math.random() * 10000) + 100,\n          timestamp: Date.now()\n        };\n        setMarketData(prev => new Map(prev.set(config.tokenAddress, newData)));\n\n        // Check for snipe opportunities\n        if (config.enabled && botStatus.isRunning && newData.price <= config.targetPrice) {\n          simulateTransaction('buy', config.tokenAddress, config.amount, newData.price);\n        }\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [snipeConfigs, marketData, botStatus.isRunning, simulateTransaction]);\n\n  // Update bot status\n  useEffect(() => {\n    const activeSnipes = snipeConfigs.filter(config => config.enabled).length;\n    const successfulTxs = transactions.filter(tx => tx.status === 'success').length;\n    const totalTxs = transactions.filter(tx => tx.status !== 'pending').length;\n    const totalProfit = transactions.filter(tx => tx.status === 'success' && tx.profit).reduce((sum, tx) => sum + (tx.profit || 0), 0);\n    setBotStatus(prev => ({\n      ...prev,\n      activeSnipes,\n      totalTransactions: totalTxs,\n      totalProfit,\n      successRate: totalTxs > 0 ? successfulTxs / totalTxs * 100 : 0\n    }));\n  }, [snipeConfigs, transactions]);\n  return {\n    snipeConfigs,\n    transactions,\n    marketData,\n    botStatus,\n    addSnipeConfig,\n    updateSnipeConfig,\n    removeSnipeConfig,\n    simulateTransaction,\n    startBot,\n    stopBot,\n    addDemoData\n  };\n}\n_s(useTrading, \"2Br704D8mWutKEsrmUa684OGB9M=\", false, function () {\n  return [useTestnet];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","useTestnet","transactionStorage","useTrading","userId","_s","isTestnet","web3Service","snipeConfigs","setSnipeConfigs","transactions","setTransactions","addDemoData","demoConfig","id","tokenAddress","targetPrice","maxPrice","amount","slippage","gasPrice","maxGas","enabled","gasSettings","mode","maxGasPrice","priorityFee","executionTimeout","retryCount","slippageSettings","baseSlippage","maxSlippage","liquidityThreshold","volatilityMultiplier","autoSell","profitTarget","stopLoss","trailingStop","percentage","activationPrice","partialSelling","percentages","priceTargets","batchSettings","maxBatchSize","batchDelay","nonceManagement","priority","demoTransactions","hash","type","tokenSymbol","price","gasUsed","timestamp","Date","now","status","profit","marketData","setMarketData","Map","botStatus","setBotStatus","isRunning","activeSnipes","totalTransactions","totalProfit","successRate","uptime","addSnipeConfig","config","newConfig","toString","prev","updateSnipeConfig","updates","map","removeSnipeConfig","filter","dashboardTransactions","getDashboardTransactions","cleanupOldTransactions","simulateTransaction","transaction","Math","random","slice","floor","undefined","saveTransaction","setTimeout","success","confirmedTransaction","tx","startBot","stopBot","interval","setInterval","forEach","currentData","get","basePrice","priceChange","newData","priceChange1m","priceChange5m","priceChange1h","volume1h","liquidity","holders","set","clearInterval","length","successfulTxs","totalTxs","reduce","sum"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useTrading.ts"],"sourcesContent":["/**\n * Custom hook for trading and sniping functionality\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { SnipeConfig, Transaction, MarketData, BotStatus } from '../types/trading';\nimport { useTestnet } from './useTestnet';\nimport { transactionStorage } from '../services/transactionStorage';\n\nexport function useTrading(userId?: string) {\n  const { isTestnet, web3Service } = useTestnet();\n  const [snipeConfigs, setSnipeConfigs] = useState<SnipeConfig[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  \n  // Add some demo data for better UX\n  const addDemoData = useCallback(() => {\n    const demoConfig: SnipeConfig = {\n      id: 'demo-1',\n      tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n      targetPrice: 0.00234,\n      maxPrice: 0.00250,\n      amount: 0.5,\n      slippage: 12,\n      gasPrice: 25,\n      maxGas: 500000,\n      enabled: true,\n      gasSettings: {\n        mode: 'auto',\n        maxGasPrice: 100,\n        priorityFee: 2,\n        executionTimeout: 120,\n        retryCount: 3,\n      },\n      slippageSettings: {\n        mode: 'adaptive',\n        baseSlippage: 12,\n        maxSlippage: 25,\n        liquidityThreshold: 100000,\n        volatilityMultiplier: 1.5,\n      },\n      autoSell: {\n        enabled: true,\n        profitTarget: 50,\n        stopLoss: -15,\n        trailingStop: {\n          enabled: true,\n          percentage: 5,\n          activationPrice: 25,\n        },\n        partialSelling: {\n          enabled: true,\n          percentages: [25, 50],\n          priceTargets: [30, 60],\n        },\n      },\n      batchSettings: {\n        enabled: true,\n        maxBatchSize: 3,\n        batchDelay: 200,\n        nonceManagement: 'auto',\n        priority: 7,\n      },\n    };\n    \n    setSnipeConfigs([demoConfig]);\n    \n    // Add some demo transactions\n    const demoTransactions: Transaction[] = [\n      {\n        id: 'demo-tx-1',\n        hash: '0x1234567890abcdef1234567890abcdef12345678',\n        type: 'buy',\n        tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\n        tokenSymbol: 'UNI',\n        amount: 0.5,\n        price: 0.00234,\n        gasUsed: 180000,\n        gasPrice: 25,\n        timestamp: Date.now() - 300000,\n        status: 'success',\n        profit: 0.0123,\n      },\n      {\n        id: 'demo-tx-2',\n        hash: '0xabcdef1234567890abcdef1234567890abcdef12',\n        type: 'buy',\n        tokenAddress: '0xa0b86a33e6776d6e94c13c6e2c2c72b6b5b7e6d3',\n        tokenSymbol: 'PEPE',\n        amount: 0.2,\n        price: 0.00001234,\n        gasUsed: 165000,\n        gasPrice: 22,\n        timestamp: Date.now() - 600000,\n        status: 'success',\n        profit: -0.0045,\n      },\n    ];\n    \n    setTransactions(demoTransactions);\n  }, []);\n  const [marketData, setMarketData] = useState<Map<string, MarketData>>(new Map());\n  const [botStatus, setBotStatus] = useState<BotStatus>({\n    isRunning: false,\n    activeSnipes: 0,\n    totalTransactions: 0,\n    totalProfit: 0,\n    successRate: 0,\n    uptime: 0,\n  });\n\n  const addSnipeConfig = useCallback((config: Omit<SnipeConfig, 'id'>) => {\n    const newConfig: SnipeConfig = {\n      ...config,\n      id: Date.now().toString(),\n    };\n    setSnipeConfigs(prev => [...prev, newConfig]);\n  }, []);\n\n  const updateSnipeConfig = useCallback((id: string, updates: Partial<SnipeConfig>) => {\n    setSnipeConfigs(prev => \n      prev.map(config => \n        config.id === id ? { ...config, ...updates } : config\n      )\n    );\n  }, []);\n\n  const removeSnipeConfig = useCallback((id: string) => {\n    setSnipeConfigs(prev => prev.filter(config => config.id !== id));\n  }, []);\n\n  // Load dashboard transactions on mount\n  useEffect(() => {\n    if (userId) {\n      const dashboardTransactions = transactionStorage.getDashboardTransactions(userId);\n      setTransactions(dashboardTransactions);\n      \n      // Cleanup old transactions periodically\n      transactionStorage.cleanupOldTransactions(userId);\n    }\n  }, [userId]);\n\n  const simulateTransaction = useCallback(async (\n    type: 'buy' | 'sell',\n    tokenAddress: string,\n    amount: number,\n    price: number\n  ): Promise<Transaction> => {\n    // Simulate transaction execution\n    const transaction: Transaction = {\n      id: Date.now().toString(),\n      hash: `0x${Math.random().toString(16).slice(2)}`,\n      type,\n      tokenAddress,\n      tokenSymbol: 'TOKEN',\n      amount,\n      price,\n      gasUsed: Math.floor(Math.random() * 100000) + 21000,\n      gasPrice: Math.floor(Math.random() * 50) + 20,\n      timestamp: Date.now(),\n      status: 'pending',\n      profit: type === 'sell' ? (Math.random() - 0.3) * amount : undefined\n    };\n\n    // Add to local state immediately\n    setTransactions(prev => [transaction, ...prev.slice(0, 9)]); // Keep only 10 in local state\n    \n    // Save to persistent storage if user is logged in\n    if (userId) {\n      transactionStorage.saveTransaction(userId, transaction);\n    }\n\n    // Simulate transaction confirmation\n    setTimeout(() => {\n      const success = Math.random() > 0.1; // 90% success rate\n      const confirmedTransaction = { \n        ...transaction, \n        status: success ? 'success' as const : 'failed' as const,\n        profit: success && type === 'buy' ? (Math.random() - 0.3) * amount * price : transaction.profit\n      };\n      \n      // Update local state\n      setTransactions(prev => \n        prev.map(tx => \n          tx.id === transaction.id ? confirmedTransaction : tx\n        )\n      );\n      \n      // Update persistent storage\n      if (userId) {\n        transactionStorage.saveTransaction(userId, confirmedTransaction);\n      }\n    }, 2000 + Math.random() * 3000);\n\n    return transaction;\n  }, [userId]);\n\n  const startBot = useCallback(() => {\n    setBotStatus(prev => ({ ...prev, isRunning: true }));\n  }, []);\n\n  const stopBot = useCallback(() => {\n    setBotStatus(prev => ({ ...prev, isRunning: false }));\n  }, []);\n\n  // Simulate market data updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      snipeConfigs.forEach(config => {\n        const currentData = marketData.get(config.tokenAddress);\n        const basePrice = currentData?.price || Math.random() * 0.001 + 0.0001;\n        const priceChange = (Math.random() - 0.5) * 0.1;\n        \n        const newData: MarketData = {\n          tokenAddress: config.tokenAddress,\n          price: basePrice * (1 + priceChange),\n          priceChange1m: (Math.random() - 0.5) * 5,\n          priceChange5m: (Math.random() - 0.5) * 15,\n          priceChange1h: (Math.random() - 0.5) * 30,\n          volume1h: Math.random() * 1000000,\n          liquidity: Math.random() * 5000000,\n          holders: Math.floor(Math.random() * 10000) + 100,\n          timestamp: Date.now(),\n        };\n\n        setMarketData(prev => new Map(prev.set(config.tokenAddress, newData)));\n\n        // Check for snipe opportunities\n        if (config.enabled && botStatus.isRunning && newData.price <= config.targetPrice) {\n          simulateTransaction('buy', config.tokenAddress, config.amount, newData.price);\n        }\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [snipeConfigs, marketData, botStatus.isRunning, simulateTransaction]);\n\n  // Update bot status\n  useEffect(() => {\n    const activeSnipes = snipeConfigs.filter(config => config.enabled).length;\n    const successfulTxs = transactions.filter(tx => tx.status === 'success').length;\n    const totalTxs = transactions.filter(tx => tx.status !== 'pending').length;\n    const totalProfit = transactions\n      .filter(tx => tx.status === 'success' && tx.profit)\n      .reduce((sum, tx) => sum + (tx.profit || 0), 0);\n\n    setBotStatus(prev => ({\n      ...prev,\n      activeSnipes,\n      totalTransactions: totalTxs,\n      totalProfit,\n      successRate: totalTxs > 0 ? (successfulTxs / totalTxs) * 100 : 0,\n    }));\n  }, [snipeConfigs, transactions]);\n\n  return {\n    snipeConfigs,\n    transactions,\n    marketData,\n    botStatus,\n    addSnipeConfig,\n    updateSnipeConfig,\n    removeSnipeConfig,\n    simulateTransaction,\n    startBot,\n    stopBot,\n    addDemoData,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}