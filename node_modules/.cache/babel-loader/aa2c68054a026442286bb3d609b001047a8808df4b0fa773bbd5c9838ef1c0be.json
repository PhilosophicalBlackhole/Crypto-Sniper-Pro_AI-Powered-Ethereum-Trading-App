{"ast":null,"code":"/**\n * Real MetaMask wallet integration hook\n * Simplified version without ethers dependency\n */import{useState,useEffect,useCallback}from'react';/**\n * Hook for real MetaMask wallet integration\n * Handles wallet connection, balance reading, and network switching\n */export function useRealMetaMask(){const[walletState,setWalletState]=useState({isConnected:false,address:null,balance:'0',chainId:null,provider:null});const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(false);/**\n   * Check if MetaMask is installed\n   */const isMetaMaskInstalled=useCallback(()=>{if(typeof window==='undefined')return false;return!!(window.ethereum&&window.ethereum.isMetaMask);},[]);/**\n   * Convert hex to decimal\n   */const hexToDecimal=hex=>{return parseInt(hex,16);};/**\n   * Convert Wei to Eth (simplified)\n   */const weiToEth=wei=>{try{const weiValue=BigInt(wei);const ethValue=Number(weiValue)/1e18;return ethValue.toFixed(4);}catch(error){console.error('Error converting wei to eth:',error);return'0.0000';}};/**\n   * Connect to MetaMask wallet\n   */const connect=useCallback(async()=>{setIsLoading(true);setError(null);try{// Check if MetaMask is installed\nif(!isMetaMaskInstalled()){throw new Error('MetaMask is not installed. Please install MetaMask extension to continue.');}// Check if ethereum object exists\nif(!window.ethereum){throw new Error('Ethereum provider not found. Please make sure MetaMask is properly installed.');}console.log('🔄 Attempting to connect to MetaMask...');// Request account access\nconst accounts=await window.ethereum.request({method:'eth_requestAccounts'});if(!accounts||accounts.length===0){throw new Error('No accounts found. Please make sure you have accounts in MetaMask and try again.');}const address=accounts[0];console.log('📱 Account found:',address);// Get balance\nlet balance='0';try{const balanceHex=await window.ethereum.request({method:'eth_getBalance',params:[address,'latest']});balance=weiToEth(balanceHex);console.log('💰 Balance retrieved:',balance,'ETH');}catch(balanceError){console.warn('⚠️ Could not retrieve balance:',balanceError);balance='0.0000';}// Get chain ID\nlet chainId=null;try{const chainIdHex=await window.ethereum.request({method:'eth_chainId'});chainId=hexToDecimal(chainIdHex);console.log('🌐 Network detected:',chainId);}catch(chainError){console.warn('⚠️ Could not retrieve chain ID:',chainError);chainId=1;// Default to mainnet\n}setWalletState({isConnected:true,address,balance,chainId,provider:window.ethereum});console.log('✅ MetaMask connected successfully!');}catch(err){console.error('❌ MetaMask connection failed:',err);let errorMessage='Failed to connect to MetaMask';if(err.code===4001){errorMessage='Connection rejected by user. Please approve the connection request.';}else if(err.code===-32002){errorMessage='MetaMask is already processing a request. Please check MetaMask extension.';}else if(err.message){errorMessage=err.message;}setError(errorMessage);}finally{setIsLoading(false);}},[isMetaMaskInstalled]);/**\n   * Disconnect wallet\n   */const disconnect=useCallback(()=>{setWalletState({isConnected:false,address:null,balance:'0',chainId:null,provider:null});setError(null);console.log('🔌 Wallet disconnected');},[]);/**\n   * Switch network\n   */const switchNetwork=useCallback(async chainId=>{if(!walletState.provider){setError('Wallet not connected');return;}setIsLoading(true);setError(null);try{await window.ethereum.request({method:'wallet_switchEthereumChain',params:[{chainId:`0x${chainId.toString(16)}`}]});console.log(`✅ Switched to network ${chainId}`);// Update chain ID in state\nsetWalletState(prev=>({...prev,chainId}));}catch(err){console.error('❌ Network switch failed:',err);// If network doesn't exist, try to add it (for mainnet)\nif(err.code===4902&&chainId===1){try{await window.ethereum.request({method:'wallet_addEthereumChain',params:[{chainId:'0x1',chainName:'Ethereum Mainnet',nativeCurrency:{name:'Ethereum',symbol:'ETH',decimals:18},rpcUrls:['https://mainnet.infura.io/v3/'],blockExplorerUrls:['https://etherscan.io/']}]});}catch(addError){setError('Failed to add Ethereum network');console.error('❌ Add network error:',addError);}}else{setError('Failed to switch network');}}finally{setIsLoading(false);}},[walletState.provider]);/**\n   * Listen for account changes\n   */useEffect(()=>{if(!isMetaMaskInstalled()||!window.ethereum)return;const handleAccountsChanged=accounts=>{console.log('🔄 Accounts changed:',accounts);if(accounts.length===0){disconnect();}else if(accounts[0]!==walletState.address){// Auto-reconnect with new account\nconnect();}};const handleChainChanged=chainId=>{console.log('🌐 Chain changed:',chainId);setWalletState(prev=>({...prev,chainId:hexToDecimal(chainId)}));};const handleConnect=connectInfo=>{console.log('🔗 MetaMask connected:',connectInfo);};const handleDisconnect=error=>{console.log('🔌 MetaMask disconnected:',error);disconnect();};// Add event listeners\nwindow.ethereum.on('accountsChanged',handleAccountsChanged);window.ethereum.on('chainChanged',handleChainChanged);window.ethereum.on('connect',handleConnect);window.ethereum.on('disconnect',handleDisconnect);return()=>{// Remove event listeners\nif(window.ethereum&&window.ethereum.removeListener){window.ethereum.removeListener('accountsChanged',handleAccountsChanged);window.ethereum.removeListener('chainChanged',handleChainChanged);window.ethereum.removeListener('connect',handleConnect);window.ethereum.removeListener('disconnect',handleDisconnect);}};},[isMetaMaskInstalled,walletState.address,connect,disconnect]);/**\n   * Check for existing connection on mount\n   */useEffect(()=>{if(!isMetaMaskInstalled())return;const checkConnection=async()=>{try{const accounts=await window.ethereum.request({method:'eth_accounts'});if(accounts&&accounts.length>0){console.log('🔄 Found existing connection, auto-connecting...');// Auto-connect if already authorized\nconnect();}}catch(err){console.error('❌ Failed to check existing connection:',err);}};checkConnection();},[isMetaMaskInstalled,connect]);return{...walletState,connect,disconnect,switchNetwork,error,isLoading};}/**\n * TypeScript declarations for ethereum object\n */","map":{"version":3,"names":["useState","useEffect","useCallback","useRealMetaMask","walletState","setWalletState","isConnected","address","balance","chainId","provider","error","setError","isLoading","setIsLoading","isMetaMaskInstalled","window","ethereum","isMetaMask","hexToDecimal","hex","parseInt","weiToEth","wei","weiValue","BigInt","ethValue","Number","toFixed","console","connect","Error","log","accounts","request","method","length","balanceHex","params","balanceError","warn","chainIdHex","chainError","err","errorMessage","code","message","disconnect","switchNetwork","toString","prev","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","handleAccountsChanged","handleChainChanged","handleConnect","connectInfo","handleDisconnect","on","removeListener","checkConnection"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useRealMetaMask.ts"],"sourcesContent":["/**\n * Real MetaMask wallet integration hook\n * Simplified version without ethers dependency\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface WalletState {\n  isConnected: boolean;\n  address: string | null;\n  balance: string;\n  chainId: number | null;\n  provider: any;\n}\n\ninterface UseRealMetaMaskReturn extends WalletState {\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  switchNetwork: (chainId: number) => Promise<void>;\n  error: string | null;\n  isLoading: boolean;\n}\n\n/**\n * Hook for real MetaMask wallet integration\n * Handles wallet connection, balance reading, and network switching\n */\nexport function useRealMetaMask(): UseRealMetaMaskReturn {\n  const [walletState, setWalletState] = useState<WalletState>({\n    isConnected: false,\n    address: null,\n    balance: '0',\n    chainId: null,\n    provider: null,\n  });\n\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Check if MetaMask is installed\n   */\n  const isMetaMaskInstalled = useCallback(() => {\n    if (typeof window === 'undefined') return false;\n    \n    return !!(\n      window.ethereum && \n      window.ethereum.isMetaMask\n    );\n  }, []);\n\n  /**\n   * Convert hex to decimal\n   */\n  const hexToDecimal = (hex: string): number => {\n    return parseInt(hex, 16);\n  };\n\n  /**\n   * Convert Wei to Eth (simplified)\n   */\n  const weiToEth = (wei: string): string => {\n    try {\n      const weiValue = BigInt(wei);\n      const ethValue = Number(weiValue) / 1e18;\n      return ethValue.toFixed(4);\n    } catch (error) {\n      console.error('Error converting wei to eth:', error);\n      return '0.0000';\n    }\n  };\n\n  /**\n   * Connect to MetaMask wallet\n   */\n  const connect = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Check if MetaMask is installed\n      if (!isMetaMaskInstalled()) {\n        throw new Error('MetaMask is not installed. Please install MetaMask extension to continue.');\n      }\n\n      // Check if ethereum object exists\n      if (!window.ethereum) {\n        throw new Error('Ethereum provider not found. Please make sure MetaMask is properly installed.');\n      }\n\n      console.log('🔄 Attempting to connect to MetaMask...');\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error('No accounts found. Please make sure you have accounts in MetaMask and try again.');\n      }\n\n      const address = accounts[0];\n      console.log('📱 Account found:', address);\n\n      // Get balance\n      let balance = '0';\n      try {\n        const balanceHex = await window.ethereum.request({\n          method: 'eth_getBalance',\n          params: [address, 'latest'],\n        });\n        balance = weiToEth(balanceHex);\n        console.log('💰 Balance retrieved:', balance, 'ETH');\n      } catch (balanceError) {\n        console.warn('⚠️ Could not retrieve balance:', balanceError);\n        balance = '0.0000';\n      }\n\n      // Get chain ID\n      let chainId = null;\n      try {\n        const chainIdHex = await window.ethereum.request({\n          method: 'eth_chainId',\n        });\n        chainId = hexToDecimal(chainIdHex);\n        console.log('🌐 Network detected:', chainId);\n      } catch (chainError) {\n        console.warn('⚠️ Could not retrieve chain ID:', chainError);\n        chainId = 1; // Default to mainnet\n      }\n\n      setWalletState({\n        isConnected: true,\n        address,\n        balance,\n        chainId,\n        provider: window.ethereum,\n      });\n\n      console.log('✅ MetaMask connected successfully!');\n    } catch (err: any) {\n      console.error('❌ MetaMask connection failed:', err);\n      \n      let errorMessage = 'Failed to connect to MetaMask';\n      \n      if (err.code === 4001) {\n        errorMessage = 'Connection rejected by user. Please approve the connection request.';\n      } else if (err.code === -32002) {\n        errorMessage = 'MetaMask is already processing a request. Please check MetaMask extension.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isMetaMaskInstalled]);\n\n  /**\n   * Disconnect wallet\n   */\n  const disconnect = useCallback(() => {\n    setWalletState({\n      isConnected: false,\n      address: null,\n      balance: '0',\n      chainId: null,\n      provider: null,\n    });\n    setError(null);\n    console.log('🔌 Wallet disconnected');\n  }, []);\n\n  /**\n   * Switch network\n   */\n  const switchNetwork = useCallback(async (chainId: number) => {\n    if (!walletState.provider) {\n      setError('Wallet not connected');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }],\n      });\n      \n      console.log(`✅ Switched to network ${chainId}`);\n      \n      // Update chain ID in state\n      setWalletState(prev => ({\n        ...prev,\n        chainId,\n      }));\n    } catch (err: any) {\n      console.error('❌ Network switch failed:', err);\n      \n      // If network doesn't exist, try to add it (for mainnet)\n      if (err.code === 4902 && chainId === 1) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x1',\n              chainName: 'Ethereum Mainnet',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18,\n              },\n              rpcUrls: ['https://mainnet.infura.io/v3/'],\n              blockExplorerUrls: ['https://etherscan.io/'],\n            }],\n          });\n        } catch (addError) {\n          setError('Failed to add Ethereum network');\n          console.error('❌ Add network error:', addError);\n        }\n      } else {\n        setError('Failed to switch network');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [walletState.provider]);\n\n  /**\n   * Listen for account changes\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled() || !window.ethereum) return;\n\n    const handleAccountsChanged = (accounts: string[]) => {\n      console.log('🔄 Accounts changed:', accounts);\n      \n      if (accounts.length === 0) {\n        disconnect();\n      } else if (accounts[0] !== walletState.address) {\n        // Auto-reconnect with new account\n        connect();\n      }\n    };\n\n    const handleChainChanged = (chainId: string) => {\n      console.log('🌐 Chain changed:', chainId);\n      \n      setWalletState(prev => ({\n        ...prev,\n        chainId: hexToDecimal(chainId),\n      }));\n    };\n\n    const handleConnect = (connectInfo: any) => {\n      console.log('🔗 MetaMask connected:', connectInfo);\n    };\n\n    const handleDisconnect = (error: any) => {\n      console.log('🔌 MetaMask disconnected:', error);\n      disconnect();\n    };\n\n    // Add event listeners\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    window.ethereum.on('connect', handleConnect);\n    window.ethereum.on('disconnect', handleDisconnect);\n\n    return () => {\n      // Remove event listeners\n      if (window.ethereum && window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('connect', handleConnect);\n        window.ethereum.removeListener('disconnect', handleDisconnect);\n      }\n    };\n  }, [isMetaMaskInstalled, walletState.address, connect, disconnect]);\n\n  /**\n   * Check for existing connection on mount\n   */\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n\n    const checkConnection = async () => {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts',\n        });\n\n        if (accounts && accounts.length > 0) {\n          console.log('🔄 Found existing connection, auto-connecting...');\n          // Auto-connect if already authorized\n          connect();\n        }\n      } catch (err) {\n        console.error('❌ Failed to check existing connection:', err);\n      }\n    };\n\n    checkConnection();\n  }, [isMetaMaskInstalled, connect]);\n\n  return {\n    ...walletState,\n    connect,\n    disconnect,\n    switchNetwork,\n    error,\n    isLoading,\n  };\n}\n\n/**\n * TypeScript declarations for ethereum object\n */\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}