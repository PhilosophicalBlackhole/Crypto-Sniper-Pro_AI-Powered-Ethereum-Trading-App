{"ast":null,"code":"/**\n * Custom hook for testnet functionality and practice trading\n */import{useState,useCallback,useEffect}from'react';import{Web3Service,TESTNETS}from'../services/web3';export function useTestnet(){const[testnetState,setTestnetState]=useState({isTestnet:false,chainId:null,chainName:'',explorerUrl:'',faucetUrl:'',web3Service:null});const[practiceMode,setPracticeMode]=useState(false);const[testTransactions,setTestTransactions]=useState([]);const getFaucetUrl=chainId=>{switch(chainId){case 5:// Goerli\nreturn'https://goerlifaucet.com/';case 11155111:// Sepolia\nreturn'https://sepoliafaucet.com/';default:return'';}};const switchToTestnet=useCallback(async chainId=>{try{const web3Service=new Web3Service(chainId);const connected=await web3Service.connectProvider();if(!connected){throw new Error('No wallet provider found');}const switched=await web3Service.switchToTestnet(chainId);if(switched){const config=web3Service.getChainConfig();setTestnetState({isTestnet:true,chainId:chainId,chainName:config.name,explorerUrl:config.explorerUrl,faucetUrl:getFaucetUrl(chainId),web3Service:web3Service});setPracticeMode(true);return true;}return false;}catch(error){console.error('Failed to switch to testnet:',error);return false;}},[]);const exitTestnet=useCallback(()=>{setTestnetState({isTestnet:false,chainId:null,chainName:'',explorerUrl:'',faucetUrl:'',web3Service:null});setPracticeMode(false);setTestTransactions([]);},[]);const sendTestTransaction=useCallback(async(to,amount)=>{if(!testnetState.web3Service){throw new Error('No testnet connection');}try{const txHash=await testnetState.web3Service.sendTestTransaction(to,amount);// Add to test transactions\nconst newTx={hash:txHash,to:to,amount:amount,timestamp:Date.now(),status:'pending',explorerUrl:testnetState.web3Service.getExplorerUrl(txHash)};setTestTransactions(prev=>[newTx,...prev]);// Monitor transaction status\nsetTimeout(async()=>{const receipt=await testnetState.web3Service.getTransactionReceipt(txHash);if(receipt){setTestTransactions(prev=>prev.map(tx=>tx.hash===txHash?{...tx,status:receipt.status==='0x1'?'success':'failed'}:tx));}},5000);return txHash;}catch(error){console.error('Test transaction failed:',error);throw error;}},[testnetState.web3Service]);const getTestBalance=useCallback(async address=>{if(!testnetState.web3Service)return'0';return await testnetState.web3Service.getBalance(address);},[testnetState.web3Service]);// Check if currently on a testnet\nuseEffect(()=>{const checkNetwork=async()=>{if(window.ethereum){try{const chainId=await window.ethereum.request({method:'eth_chainId'});const numChainId=parseInt(chainId,16);const isTestnetChain=Object.values(TESTNETS).some(config=>config.chainId===numChainId);if(isTestnetChain&&!testnetState.isTestnet){// User is already on testnet\nconst web3Service=new Web3Service(numChainId);const config=web3Service.getChainConfig();setTestnetState({isTestnet:true,chainId:numChainId,chainName:config.name,explorerUrl:config.explorerUrl,faucetUrl:getFaucetUrl(numChainId),web3Service:web3Service});}}catch(error){console.error('Error checking network:',error);}}};checkNetwork();},[testnetState.isTestnet]);return{...testnetState,practiceMode,testTransactions,switchToTestnet,exitTestnet,sendTestTransaction,getTestBalance,availableTestnets:Object.values(TESTNETS)};}","map":{"version":3,"names":["useState","useCallback","useEffect","Web3Service","TESTNETS","useTestnet","testnetState","setTestnetState","isTestnet","chainId","chainName","explorerUrl","faucetUrl","web3Service","practiceMode","setPracticeMode","testTransactions","setTestTransactions","getFaucetUrl","switchToTestnet","connected","connectProvider","Error","switched","config","getChainConfig","name","error","console","exitTestnet","sendTestTransaction","to","amount","txHash","newTx","hash","timestamp","Date","now","status","getExplorerUrl","prev","setTimeout","receipt","getTransactionReceipt","map","tx","getTestBalance","address","getBalance","checkNetwork","window","ethereum","request","method","numChainId","parseInt","isTestnetChain","Object","values","some","availableTestnets"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useTestnet.ts"],"sourcesContent":["/**\n * Custom hook for testnet functionality and practice trading\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { Web3Service, TESTNETS } from '../services/web3';\n\nexport interface TestnetState {\n  isTestnet: boolean;\n  chainId: number | null;\n  chainName: string;\n  explorerUrl: string;\n  faucetUrl: string;\n  web3Service: Web3Service | null;\n}\n\nexport function useTestnet() {\n  const [testnetState, setTestnetState] = useState<TestnetState>({\n    isTestnet: false,\n    chainId: null,\n    chainName: '',\n    explorerUrl: '',\n    faucetUrl: '',\n    web3Service: null,\n  });\n\n  const [practiceMode, setPracticeMode] = useState(false);\n  const [testTransactions, setTestTransactions] = useState<any[]>([]);\n\n  const getFaucetUrl = (chainId: number): string => {\n    switch (chainId) {\n      case 5: // Goerli\n        return 'https://goerlifaucet.com/';\n      case 11155111: // Sepolia\n        return 'https://sepoliafaucet.com/';\n      default:\n        return '';\n    }\n  };\n\n  const switchToTestnet = useCallback(async (chainId: number) => {\n    try {\n      const web3Service = new Web3Service(chainId);\n      const connected = await web3Service.connectProvider();\n      \n      if (!connected) {\n        throw new Error('No wallet provider found');\n      }\n\n      const switched = await web3Service.switchToTestnet(chainId);\n      \n      if (switched) {\n        const config = web3Service.getChainConfig();\n        setTestnetState({\n          isTestnet: true,\n          chainId: chainId,\n          chainName: config.name,\n          explorerUrl: config.explorerUrl,\n          faucetUrl: getFaucetUrl(chainId),\n          web3Service: web3Service,\n        });\n        setPracticeMode(true);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to switch to testnet:', error);\n      return false;\n    }\n  }, []);\n\n  const exitTestnet = useCallback(() => {\n    setTestnetState({\n      isTestnet: false,\n      chainId: null,\n      chainName: '',\n      explorerUrl: '',\n      faucetUrl: '',\n      web3Service: null,\n    });\n    setPracticeMode(false);\n    setTestTransactions([]);\n  }, []);\n\n  const sendTestTransaction = useCallback(async (to: string, amount: string) => {\n    if (!testnetState.web3Service) {\n      throw new Error('No testnet connection');\n    }\n\n    try {\n      const txHash = await testnetState.web3Service.sendTestTransaction(to, amount);\n      \n      // Add to test transactions\n      const newTx = {\n        hash: txHash,\n        to: to,\n        amount: amount,\n        timestamp: Date.now(),\n        status: 'pending',\n        explorerUrl: testnetState.web3Service.getExplorerUrl(txHash),\n      };\n      \n      setTestTransactions(prev => [newTx, ...prev]);\n      \n      // Monitor transaction status\n      setTimeout(async () => {\n        const receipt = await testnetState.web3Service!.getTransactionReceipt(txHash);\n        if (receipt) {\n          setTestTransactions(prev => \n            prev.map(tx => \n              tx.hash === txHash \n                ? { ...tx, status: receipt.status === '0x1' ? 'success' : 'failed' }\n                : tx\n            )\n          );\n        }\n      }, 5000);\n      \n      return txHash;\n    } catch (error) {\n      console.error('Test transaction failed:', error);\n      throw error;\n    }\n  }, [testnetState.web3Service]);\n\n  const getTestBalance = useCallback(async (address: string) => {\n    if (!testnetState.web3Service) return '0';\n    \n    return await testnetState.web3Service.getBalance(address);\n  }, [testnetState.web3Service]);\n\n  // Check if currently on a testnet\n  useEffect(() => {\n    const checkNetwork = async () => {\n      if (window.ethereum) {\n        try {\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          const numChainId = parseInt(chainId, 16);\n          \n          const isTestnetChain = Object.values(TESTNETS).some(config => config.chainId === numChainId);\n          \n          if (isTestnetChain && !testnetState.isTestnet) {\n            // User is already on testnet\n            const web3Service = new Web3Service(numChainId);\n            const config = web3Service.getChainConfig();\n            \n            setTestnetState({\n              isTestnet: true,\n              chainId: numChainId,\n              chainName: config.name,\n              explorerUrl: config.explorerUrl,\n              faucetUrl: getFaucetUrl(numChainId),\n              web3Service: web3Service,\n            });\n          }\n        } catch (error) {\n          console.error('Error checking network:', error);\n        }\n      }\n    };\n\n    checkNetwork();\n  }, [testnetState.isTestnet]);\n\n  return {\n    ...testnetState,\n    practiceMode,\n    testTransactions,\n    switchToTestnet,\n    exitTestnet,\n    sendTestTransaction,\n    getTestBalance,\n    availableTestnets: Object.values(TESTNETS),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}