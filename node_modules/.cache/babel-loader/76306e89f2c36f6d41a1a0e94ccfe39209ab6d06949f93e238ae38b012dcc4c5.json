{"ast":null,"code":"/**\n * Subscription management hook\n */import{useState,useEffect,useCallback}from'react';import{SUBSCRIPTION_PLANS}from'../types/subscription';export function useSubscription(userId){const[subscription,setSubscription]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Get current subscription plan\nconst plan=subscription?SUBSCRIPTION_PLANS[subscription.planId]||SUBSCRIPTION_PLANS.free:SUBSCRIPTION_PLANS.free;/**\n   * Load subscription data from storage/API\n   */const loadSubscription=useCallback(async()=>{if(!userId){setSubscription(null);setLoading(false);return;}try{setLoading(true);// Check localStorage first\nconst stored=localStorage.getItem(`cryptosniper_subscription_${userId}`);if(stored){const sub=JSON.parse(stored);// Validate subscription is still active\nif(sub.currentPeriodEnd>Date.now()&&sub.status==='active'){setSubscription(sub);setLoading(false);return;}}// For creator account, give premium access\nif(userId==='creator_admin_001'){const creatorSub={id:'creator_subscription',userId:userId,planId:'premium',status:'active',currentPeriodStart:Date.now(),currentPeriodEnd:Date.now()+365*24*60*60*1000,// 1 year\ncancelAtPeriodEnd:false,createdAt:Date.now(),updatedAt:Date.now()};setSubscription(creatorSub);localStorage.setItem(`cryptosniper_subscription_${userId}`,JSON.stringify(creatorSub));}else{// Regular users default to free plan\nsetSubscription(null);}}catch(err){console.error('Error loading subscription:',err);setError('Failed to load subscription data');}finally{setLoading(false);}},[userId]);useEffect(()=>{loadSubscription();},[loadSubscription]);/**\n   * Check if user can access a specific feature\n   */const canAccessFeature=useCallback(feature=>{return plan.limits[feature];},[plan]);/**\n   * Upgrade to Pro plan\n   */const upgradeToProPlan=useCallback(async()=>{if(!userId)return null;try{setLoading(true);// Create payment intent for Pro plan\nconst paymentIntent={id:`pi_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:SUBSCRIPTION_PLANS.pro.price*100,// Amount in cents\ncurrency:'usd',status:'requires_payment_method',metadata:{userId,planId:'pro',upgrade:true}};// In production, this would call your payment processor (Stripe, etc.)\n// For now, we'll simulate successful payment\nsetTimeout(()=>{const newSubscription={id:`sub_${Date.now()}`,userId,planId:'pro',status:'active',currentPeriodStart:Date.now(),currentPeriodEnd:Date.now()+30*24*60*60*1000,// 30 days\ncancelAtPeriodEnd:false,createdAt:Date.now(),updatedAt:Date.now()};setSubscription(newSubscription);localStorage.setItem(`cryptosniper_subscription_${userId}`,JSON.stringify(newSubscription));},2000);return paymentIntent;}catch(err){console.error('Error upgrading to Pro:',err);setError('Failed to upgrade subscription');return null;}finally{setLoading(false);}},[userId]);/**\n   * Upgrade to Premium plan\n   */const upgradeToPremiumPlan=useCallback(async()=>{if(!userId)return null;try{setLoading(true);const paymentIntent={id:`pi_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:SUBSCRIPTION_PLANS.premium.price*100,currency:'usd',status:'requires_payment_method',metadata:{userId,planId:'premium',upgrade:true}};// Simulate payment processing\nsetTimeout(()=>{const newSubscription={id:`sub_${Date.now()}`,userId,planId:'premium',status:'active',currentPeriodStart:Date.now(),currentPeriodEnd:Date.now()+30*24*60*60*1000,cancelAtPeriodEnd:false,createdAt:Date.now(),updatedAt:Date.now()};setSubscription(newSubscription);localStorage.setItem(`cryptosniper_subscription_${userId}`,JSON.stringify(newSubscription));},2000);return paymentIntent;}catch(err){console.error('Error upgrading to Premium:',err);setError('Failed to upgrade subscription');return null;}finally{setLoading(false);}},[userId]);/**\n   * Cancel subscription\n   */const cancelSubscription=useCallback(async()=>{if(!subscription)return false;try{setLoading(true);const updatedSubscription={...subscription,cancelAtPeriodEnd:true,updatedAt:Date.now()};setSubscription(updatedSubscription);localStorage.setItem(`cryptosniper_subscription_${userId}`,JSON.stringify(updatedSubscription));return true;}catch(err){console.error('Error canceling subscription:',err);setError('Failed to cancel subscription');return false;}finally{setLoading(false);}},[subscription,userId]);/**\n   * Update payment method\n   */const updatePaymentMethod=useCallback(async paymentMethodId=>{if(!subscription)return false;try{setLoading(true);// Update payment method logic would go here\n// For now, just return success\nreturn true;}catch(err){console.error('Error updating payment method:',err);setError('Failed to update payment method');return false;}finally{setLoading(false);}},[subscription]);return{subscription,plan,loading,error,canAccessFeature,upgradeToProPlan,upgradeToPremiumPlan,cancelSubscription,updatePaymentMethod};}export default useSubscription;","map":{"version":3,"names":["useState","useEffect","useCallback","SUBSCRIPTION_PLANS","useSubscription","userId","subscription","setSubscription","loading","setLoading","error","setError","plan","planId","free","loadSubscription","stored","localStorage","getItem","sub","JSON","parse","currentPeriodEnd","Date","now","status","creatorSub","id","currentPeriodStart","cancelAtPeriodEnd","createdAt","updatedAt","setItem","stringify","err","console","canAccessFeature","feature","limits","upgradeToProPlan","paymentIntent","Math","random","toString","substr","amount","pro","price","currency","metadata","upgrade","setTimeout","newSubscription","upgradeToPremiumPlan","premium","cancelSubscription","updatedSubscription","updatePaymentMethod","paymentMethodId"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useSubscription.ts"],"sourcesContent":["/**\n * Subscription management hook\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { SUBSCRIPTION_PLANS, type Subscription, type SubscriptionPlan, type PaymentIntent } from '../types/subscription';\n\ninterface SubscriptionContextType {\n  subscription: Subscription | null;\n  plan: SubscriptionPlan;\n  loading: boolean;\n  error: string | null;\n  canAccessFeature: (feature: keyof SubscriptionPlan['limits']) => boolean;\n  upgradeToProPlan: () => Promise<PaymentIntent | null>;\n  upgradeToPremiumPlan: () => Promise<PaymentIntent | null>;\n  cancelSubscription: () => Promise<boolean>;\n  updatePaymentMethod: (paymentMethodId: string) => Promise<boolean>;\n}\n\nexport function useSubscription(userId?: string): SubscriptionContextType {\n  const [subscription, setSubscription] = useState<Subscription | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Get current subscription plan\n  const plan = subscription ? SUBSCRIPTION_PLANS[subscription.planId] || SUBSCRIPTION_PLANS.free : SUBSCRIPTION_PLANS.free;\n\n  /**\n   * Load subscription data from storage/API\n   */\n  const loadSubscription = useCallback(async () => {\n    if (!userId) {\n      setSubscription(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Check localStorage first\n      const stored = localStorage.getItem(`cryptosniper_subscription_${userId}`);\n      if (stored) {\n        const sub = JSON.parse(stored);\n        // Validate subscription is still active\n        if (sub.currentPeriodEnd > Date.now() && sub.status === 'active') {\n          setSubscription(sub);\n          setLoading(false);\n          return;\n        }\n      }\n\n      // For creator account, give premium access\n      if (userId === 'creator_admin_001') {\n        const creatorSub: Subscription = {\n          id: 'creator_subscription',\n          userId: userId,\n          planId: 'premium',\n          status: 'active',\n          currentPeriodStart: Date.now(),\n          currentPeriodEnd: Date.now() + (365 * 24 * 60 * 60 * 1000), // 1 year\n          cancelAtPeriodEnd: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now()\n        };\n        setSubscription(creatorSub);\n        localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(creatorSub));\n      } else {\n        // Regular users default to free plan\n        setSubscription(null);\n      }\n\n    } catch (err) {\n      console.error('Error loading subscription:', err);\n      setError('Failed to load subscription data');\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    loadSubscription();\n  }, [loadSubscription]);\n\n  /**\n   * Check if user can access a specific feature\n   */\n  const canAccessFeature = useCallback((feature: keyof SubscriptionPlan['limits']): boolean => {\n    return plan.limits[feature] as boolean;\n  }, [plan]);\n\n  /**\n   * Upgrade to Pro plan\n   */\n  const upgradeToProPlan = useCallback(async (): Promise<PaymentIntent | null> => {\n    if (!userId) return null;\n\n    try {\n      setLoading(true);\n      \n      // Create payment intent for Pro plan\n      const paymentIntent: PaymentIntent = {\n        id: `pi_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        amount: SUBSCRIPTION_PLANS.pro.price * 100, // Amount in cents\n        currency: 'usd',\n        status: 'requires_payment_method',\n        metadata: {\n          userId,\n          planId: 'pro',\n          upgrade: true\n        }\n      };\n\n      // In production, this would call your payment processor (Stripe, etc.)\n      // For now, we'll simulate successful payment\n      setTimeout(() => {\n        const newSubscription: Subscription = {\n          id: `sub_${Date.now()}`,\n          userId,\n          planId: 'pro',\n          status: 'active',\n          currentPeriodStart: Date.now(),\n          currentPeriodEnd: Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 days\n          cancelAtPeriodEnd: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now()\n        };\n\n        setSubscription(newSubscription);\n        localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(newSubscription));\n      }, 2000);\n\n      return paymentIntent;\n\n    } catch (err) {\n      console.error('Error upgrading to Pro:', err);\n      setError('Failed to upgrade subscription');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n\n  /**\n   * Upgrade to Premium plan\n   */\n  const upgradeToPremiumPlan = useCallback(async (): Promise<PaymentIntent | null> => {\n    if (!userId) return null;\n\n    try {\n      setLoading(true);\n      \n      const paymentIntent: PaymentIntent = {\n        id: `pi_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        amount: SUBSCRIPTION_PLANS.premium.price * 100,\n        currency: 'usd',\n        status: 'requires_payment_method',\n        metadata: {\n          userId,\n          planId: 'premium',\n          upgrade: true\n        }\n      };\n\n      // Simulate payment processing\n      setTimeout(() => {\n        const newSubscription: Subscription = {\n          id: `sub_${Date.now()}`,\n          userId,\n          planId: 'premium',\n          status: 'active',\n          currentPeriodStart: Date.now(),\n          currentPeriodEnd: Date.now() + (30 * 24 * 60 * 60 * 1000),\n          cancelAtPeriodEnd: false,\n          createdAt: Date.now(),\n          updatedAt: Date.now()\n        };\n\n        setSubscription(newSubscription);\n        localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(newSubscription));\n      }, 2000);\n\n      return paymentIntent;\n\n    } catch (err) {\n      console.error('Error upgrading to Premium:', err);\n      setError('Failed to upgrade subscription');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [userId]);\n\n  /**\n   * Cancel subscription\n   */\n  const cancelSubscription = useCallback(async (): Promise<boolean> => {\n    if (!subscription) return false;\n\n    try {\n      setLoading(true);\n      \n      const updatedSubscription = {\n        ...subscription,\n        cancelAtPeriodEnd: true,\n        updatedAt: Date.now()\n      };\n\n      setSubscription(updatedSubscription);\n      localStorage.setItem(`cryptosniper_subscription_${userId}`, JSON.stringify(updatedSubscription));\n      \n      return true;\n\n    } catch (err) {\n      console.error('Error canceling subscription:', err);\n      setError('Failed to cancel subscription');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [subscription, userId]);\n\n  /**\n   * Update payment method\n   */\n  const updatePaymentMethod = useCallback(async (paymentMethodId: string): Promise<boolean> => {\n    if (!subscription) return false;\n\n    try {\n      setLoading(true);\n      \n      // Update payment method logic would go here\n      // For now, just return success\n      return true;\n\n    } catch (err) {\n      console.error('Error updating payment method:', err);\n      setError('Failed to update payment method');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [subscription]);\n\n  return {\n    subscription,\n    plan,\n    loading,\n    error,\n    canAccessFeature,\n    upgradeToProPlan,\n    upgradeToPremiumPlan,\n    cancelSubscription,\n    updatePaymentMethod\n  };\n}\n\nexport default useSubscription;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}