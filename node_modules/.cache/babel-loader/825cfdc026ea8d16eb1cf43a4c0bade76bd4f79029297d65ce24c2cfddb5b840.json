{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Custom hook for testnet functionality and practice trading\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { Web3Service, TESTNETS } from '../services/web3';\nexport function useTestnet() {\n  _s();\n  const [testnetState, setTestnetState] = useState({\n    isTestnet: false,\n    chainId: null,\n    chainName: '',\n    explorerUrl: '',\n    faucetUrl: '',\n    web3Service: null\n  });\n  const [practiceMode, setPracticeMode] = useState(false);\n  const [testTransactions, setTestTransactions] = useState([]);\n  const getFaucetUrl = chainId => {\n    switch (chainId) {\n      case 5:\n        // Goerli\n        return 'https://goerlifaucet.com/';\n      case 11155111:\n        // Sepolia\n        return 'https://sepoliafaucet.com/';\n      default:\n        return '';\n    }\n  };\n  const switchToTestnet = useCallback(async chainId => {\n    try {\n      const web3Service = new Web3Service(chainId);\n      const connected = await web3Service.connectProvider();\n      if (!connected) {\n        throw new Error('No wallet provider found');\n      }\n      const switched = await web3Service.switchToTestnet(chainId);\n      if (switched) {\n        const config = web3Service.getChainConfig();\n        setTestnetState({\n          isTestnet: true,\n          chainId: chainId,\n          chainName: config.name,\n          explorerUrl: config.explorerUrl,\n          faucetUrl: getFaucetUrl(chainId),\n          web3Service: web3Service\n        });\n        setPracticeMode(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to switch to testnet:', error);\n      return false;\n    }\n  }, []);\n  const exitTestnet = useCallback(() => {\n    setTestnetState({\n      isTestnet: false,\n      chainId: null,\n      chainName: '',\n      explorerUrl: '',\n      faucetUrl: '',\n      web3Service: null\n    });\n    setPracticeMode(false);\n    setTestTransactions([]);\n  }, []);\n  const sendTestTransaction = useCallback(async (to, amount) => {\n    if (!testnetState.web3Service) {\n      throw new Error('No testnet connection');\n    }\n    try {\n      const txHash = await testnetState.web3Service.sendTestTransaction(to, amount);\n\n      // Add to test transactions\n      const newTx = {\n        hash: txHash,\n        to: to,\n        amount: amount,\n        timestamp: Date.now(),\n        status: 'pending',\n        explorerUrl: testnetState.web3Service.getExplorerUrl(txHash)\n      };\n      setTestTransactions(prev => [newTx, ...prev]);\n\n      // Monitor transaction status\n      setTimeout(async () => {\n        const receipt = await testnetState.web3Service.getTransactionReceipt(txHash);\n        if (receipt) {\n          setTestTransactions(prev => prev.map(tx => tx.hash === txHash ? {\n            ...tx,\n            status: receipt.status === '0x1' ? 'success' : 'failed'\n          } : tx));\n        }\n      }, 5000);\n      return txHash;\n    } catch (error) {\n      console.error('Test transaction failed:', error);\n      throw error;\n    }\n  }, [testnetState.web3Service]);\n  const getTestBalance = useCallback(async address => {\n    if (!testnetState.web3Service) return '0';\n    return await testnetState.web3Service.getBalance(address);\n  }, [testnetState.web3Service]);\n\n  // Check if currently on a testnet\n  useEffect(() => {\n    const checkNetwork = async () => {\n      if (window.ethereum) {\n        try {\n          const chainId = await window.ethereum.request({\n            method: 'eth_chainId'\n          });\n          const numChainId = parseInt(chainId, 16);\n          const isTestnetChain = Object.values(TESTNETS).some(config => config.chainId === numChainId);\n          if (isTestnetChain && !testnetState.isTestnet) {\n            // User is already on testnet\n            const web3Service = new Web3Service(numChainId);\n            const config = web3Service.getChainConfig();\n            setTestnetState({\n              isTestnet: true,\n              chainId: numChainId,\n              chainName: config.name,\n              explorerUrl: config.explorerUrl,\n              faucetUrl: getFaucetUrl(numChainId),\n              web3Service: web3Service\n            });\n          }\n        } catch (error) {\n          console.error('Error checking network:', error);\n        }\n      }\n    };\n    checkNetwork();\n  }, [testnetState.isTestnet]);\n  return {\n    ...testnetState,\n    practiceMode,\n    testTransactions,\n    switchToTestnet,\n    exitTestnet,\n    sendTestTransaction,\n    getTestBalance,\n    availableTestnets: Object.values(TESTNETS)\n  };\n}\n_s(useTestnet, \"WZqjFNp+Z+qMqsYA021Jpf35pC4=\");","map":{"version":3,"names":["useState","useCallback","useEffect","Web3Service","TESTNETS","useTestnet","_s","testnetState","setTestnetState","isTestnet","chainId","chainName","explorerUrl","faucetUrl","web3Service","practiceMode","setPracticeMode","testTransactions","setTestTransactions","getFaucetUrl","switchToTestnet","connected","connectProvider","Error","switched","config","getChainConfig","name","error","console","exitTestnet","sendTestTransaction","to","amount","txHash","newTx","hash","timestamp","Date","now","status","getExplorerUrl","prev","setTimeout","receipt","getTransactionReceipt","map","tx","getTestBalance","address","getBalance","checkNetwork","window","ethereum","request","method","numChainId","parseInt","isTestnetChain","Object","values","some","availableTestnets"],"sources":["C:/Users/tpars/source/repos/Crypto Sniper Pro_ AI-Powered Ethereum Trading App/src/hooks/useTestnet.ts"],"sourcesContent":["/**\n * Custom hook for testnet functionality and practice trading\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { Web3Service, TESTNETS } from '../services/web3';\n\nexport interface TestnetState {\n  isTestnet: boolean;\n  chainId: number | null;\n  chainName: string;\n  explorerUrl: string;\n  faucetUrl: string;\n  web3Service: Web3Service | null;\n}\n\nexport function useTestnet() {\n  const [testnetState, setTestnetState] = useState<TestnetState>({\n    isTestnet: false,\n    chainId: null,\n    chainName: '',\n    explorerUrl: '',\n    faucetUrl: '',\n    web3Service: null,\n  });\n\n  const [practiceMode, setPracticeMode] = useState(false);\n  const [testTransactions, setTestTransactions] = useState<any[]>([]);\n\n  const getFaucetUrl = (chainId: number): string => {\n    switch (chainId) {\n      case 5: // Goerli\n        return 'https://goerlifaucet.com/';\n      case 11155111: // Sepolia\n        return 'https://sepoliafaucet.com/';\n      default:\n        return '';\n    }\n  };\n\n  const switchToTestnet = useCallback(async (chainId: number) => {\n    try {\n      const web3Service = new Web3Service(chainId);\n      const connected = await web3Service.connectProvider();\n      \n      if (!connected) {\n        throw new Error('No wallet provider found');\n      }\n\n      const switched = await web3Service.switchToTestnet(chainId);\n      \n      if (switched) {\n        const config = web3Service.getChainConfig();\n        setTestnetState({\n          isTestnet: true,\n          chainId: chainId,\n          chainName: config.name,\n          explorerUrl: config.explorerUrl,\n          faucetUrl: getFaucetUrl(chainId),\n          web3Service: web3Service,\n        });\n        setPracticeMode(true);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to switch to testnet:', error);\n      return false;\n    }\n  }, []);\n\n  const exitTestnet = useCallback(() => {\n    setTestnetState({\n      isTestnet: false,\n      chainId: null,\n      chainName: '',\n      explorerUrl: '',\n      faucetUrl: '',\n      web3Service: null,\n    });\n    setPracticeMode(false);\n    setTestTransactions([]);\n  }, []);\n\n  const sendTestTransaction = useCallback(async (to: string, amount: string) => {\n    if (!testnetState.web3Service) {\n      throw new Error('No testnet connection');\n    }\n\n    try {\n      const txHash = await testnetState.web3Service.sendTestTransaction(to, amount);\n      \n      // Add to test transactions\n      const newTx = {\n        hash: txHash,\n        to: to,\n        amount: amount,\n        timestamp: Date.now(),\n        status: 'pending',\n        explorerUrl: testnetState.web3Service.getExplorerUrl(txHash),\n      };\n      \n      setTestTransactions(prev => [newTx, ...prev]);\n      \n      // Monitor transaction status\n      setTimeout(async () => {\n        const receipt = await testnetState.web3Service!.getTransactionReceipt(txHash);\n        if (receipt) {\n          setTestTransactions(prev => \n            prev.map(tx => \n              tx.hash === txHash \n                ? { ...tx, status: receipt.status === '0x1' ? 'success' : 'failed' }\n                : tx\n            )\n          );\n        }\n      }, 5000);\n      \n      return txHash;\n    } catch (error) {\n      console.error('Test transaction failed:', error);\n      throw error;\n    }\n  }, [testnetState.web3Service]);\n\n  const getTestBalance = useCallback(async (address: string) => {\n    if (!testnetState.web3Service) return '0';\n    \n    return await testnetState.web3Service.getBalance(address);\n  }, [testnetState.web3Service]);\n\n  // Check if currently on a testnet\n  useEffect(() => {\n    const checkNetwork = async () => {\n      if (window.ethereum) {\n        try {\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          const numChainId = parseInt(chainId, 16);\n          \n          const isTestnetChain = Object.values(TESTNETS).some(config => config.chainId === numChainId);\n          \n          if (isTestnetChain && !testnetState.isTestnet) {\n            // User is already on testnet\n            const web3Service = new Web3Service(numChainId);\n            const config = web3Service.getChainConfig();\n            \n            setTestnetState({\n              isTestnet: true,\n              chainId: numChainId,\n              chainName: config.name,\n              explorerUrl: config.explorerUrl,\n              faucetUrl: getFaucetUrl(numChainId),\n              web3Service: web3Service,\n            });\n          }\n        } catch (error) {\n          console.error('Error checking network:', error);\n        }\n      }\n    };\n\n    checkNetwork();\n  }, [testnetState.isTestnet]);\n\n  return {\n    ...testnetState,\n    practiceMode,\n    testTransactions,\n    switchToTestnet,\n    exitTestnet,\n    sendTestTransaction,\n    getTestBalance,\n    availableTestnets: Object.values(TESTNETS),\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}